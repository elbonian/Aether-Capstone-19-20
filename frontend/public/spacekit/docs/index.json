[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Camera.js",
    "content": "import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nimport { rescaleNumber, rescaleArray } from './Scale';\n\n/**\n * A wrapper for Three.js camera and controls.\n * TODO(ian): Rename to \"Viewer\"\n */\nexport class Camera {\n  /**\n   * @param {Object} context The simulation context\n   */\n  constructor(context) {\n    // TODO(ian): Accept either context or container\n    this._context = context;\n\n    this._camera = null;\n    this._cameraControls = null;\n\n    // Optional mesh that we are following.\n    this._followMesh = null;\n\n    this.init();\n  }\n\n  init() {\n    const containerWidth = this._context.container.width;\n    const containerHeight = this._context.container.height;\n\n    this._camera = new THREE.PerspectiveCamera(\n      50,\n      containerWidth / containerHeight,\n      rescaleNumber(0.00001),\n      rescaleNumber(2000),\n    );\n\n    // Controls\n    // TODO(ian): Set maxDistance to prevent camera farplane cutoff.\n    // See https://discourse.threejs.org/t/camera-zoom-to-fit-object/936/6\n\n    // TODO(ian): Access this better\n    const renderer = this._context.simulation._renderer;\n\n    const controls = new OrbitControls(this._camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = true;\n    controls.zoomSpeed = 1.5;\n    controls.userPanSpeed = 20;\n    controls.rotateSpeed = 2;\n    controls.touches = {\n      ONE: THREE.TOUCH.ROTATE,\n      TWO: THREE.TOUCH.DOLLY_ROTATE,\n    };\n    this._cameraControls = controls;\n  }\n\n  /**\n   * Move the camera to follow a SpaceObject as it moves. Currently only works\n   * for non-particlesystems.\n   * @param {SpaceObject} obj SpaceObject to follow.\n   * @param {Array.<Number>} position Position of the camera with respect to\n   * the object.\n   */\n  followObject(obj, position) {\n    const followMesh = obj.get3jsObjects()[0];\n\n    this._cameraControls.enablePan = false;\n\n    const rescaled = rescaleArray(position);\n    this._camera.position.add(\n      new THREE.Vector3(rescaled[0], rescaled[1], rescaled[2]),\n    );\n\n    this._cameraControls.update();\n    this._followMesh = followMesh;\n  }\n\n  /**\n   * Stop the camera from following the object.\n   */\n  stopFollowingObject() {\n    if (this._followMesh) {\n      this._followMesh.remove(this._camera);\n      this._followMesh = null;\n      this._cameraControls.enablePan = true;\n    }\n  }\n\n  /**\n   * @returns {boolean} True if camera is following object.\n   */\n  isFollowingObject() {\n    return !!this._followMesh;\n  }\n\n  /**\n   * @returns {THREE.Camera} The THREE.js camera object.\n   */\n  get3jsCamera() {\n    return this._camera;\n  }\n\n  /**\n   * @returns {THREE.CameraControls} The THREE.js CameraControls object.\n   */\n  get3jsCameraControls() {\n    return this._cameraControls;\n  }\n\n  /**\n   * Update the camera position and process control inputs.\n   */\n  update() {\n    if (this.isFollowingObject()) {\n      const newpos = this._followMesh.position.clone();\n\n      const offset = newpos.clone().sub(this._cameraControls.target);\n      this._camera.position.add(offset);\n\n      this._cameraControls.target.set(newpos.x, newpos.y, newpos.z);\n    }\n\n    // Handle control movements\n    this._cameraControls.update();\n\n    // Update camera matrix\n    this._camera.updateMatrixWorld();\n  }\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/Camera.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Camera",
    "memberof": "src/Camera.js",
    "static": true,
    "longname": "src/Camera.js~Camera",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Camera.js",
    "importStyle": "{Camera}",
    "description": "A wrapper for Three.js camera and controls.\nTODO(ian): Rename to \"Viewer\"",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Camera.js~Camera#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "The simulation context"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "_context",
    "memberof": "src/Camera.js~Camera",
    "static": false,
    "longname": "src/Camera.js~Camera#_context",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_camera",
    "memberof": "src/Camera.js~Camera",
    "static": false,
    "longname": "src/Camera.js~Camera#_camera",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_cameraControls",
    "memberof": "src/Camera.js~Camera",
    "static": false,
    "longname": "src/Camera.js~Camera#_cameraControls",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_followMesh",
    "memberof": "src/Camera.js~Camera",
    "static": false,
    "longname": "src/Camera.js~Camera#_followMesh",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "init",
    "memberof": "src/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Camera.js~Camera#init",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "followObject",
    "memberof": "src/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Camera.js~Camera#followObject",
    "access": "public",
    "description": "Move the camera to follow a SpaceObject as it moves. Currently only works\nfor non-particlesystems.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "SpaceObject"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "SpaceObject to follow."
      },
      {
        "nullable": null,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "Position of the camera with respect to\nthe object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "stopFollowingObject",
    "memberof": "src/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Camera.js~Camera#stopFollowingObject",
    "access": "public",
    "description": "Stop the camera from following the object.",
    "lineNumber": 82,
    "params": [],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "isFollowingObject",
    "memberof": "src/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Camera.js~Camera#isFollowingObject",
    "access": "public",
    "description": "",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if camera is following object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if camera is following object."
    },
    "params": []
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "get3jsCamera",
    "memberof": "src/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Camera.js~Camera#get3jsCamera",
    "access": "public",
    "description": "",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{THREE.Camera} The THREE.js camera object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Camera"
      ],
      "spread": false,
      "description": "The THREE.js camera object."
    },
    "params": []
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "get3jsCameraControls",
    "memberof": "src/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Camera.js~Camera#get3jsCameraControls",
    "access": "public",
    "description": "",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{THREE.CameraControls} The THREE.js CameraControls object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.CameraControls"
      ],
      "spread": false,
      "description": "The THREE.js CameraControls object."
    },
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "update",
    "memberof": "src/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Camera.js~Camera#update",
    "access": "public",
    "description": "Update the camera position and process control inputs.",
    "lineNumber": 114,
    "params": [],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/Coordinates.js",
    "content": "import { rad, deg } from './Units';\n\nconst J2000 = 2451545.0;\n\nexport function sphericalToCartesian(ra, dec, dist) {\n  // See http://www.stargazing.net/kepler/rectang.html\n  return [\n    dist * Math.cos(ra) * Math.cos(dec),\n    dist * Math.sin(ra) * Math.cos(dec),\n    dist * Math.sin(dec),\n  ];\n}\n\n/**\n * See https://en.wikipedia.org/wiki/Ecliptic_coordinate_system#Converting_Cartesian_vector\n */\nexport function equatorialToEcliptic_Cartesian(x, y, z, tilt) {\n  return [\n    x,\n    Math.cos(tilt) * y + Math.sin(tilt) * z,\n    -Math.sin(tilt) * y + Math.cos(tilt) * z,\n  ];\n}\n\nexport function eclipticToEquatorial_Cartesian(x, y, z, tilt) {\n  return [\n    x,\n    Math.cos(tilt) * y + -Math.sin(tilt) * z,\n    Math.sin(tilt) * y + Math.cos(tilt) * z,\n  ];\n}\n\n/**\n * Get Earth's obliquity and nutation at a given date.\n * @param {Number} jd JD date\n * @return {Object} Object with attributes \"obliquity\" and \"nutation\" provided\n * in radians\n */\nexport function getNutationAndObliquity(jd = J2000) {\n  const t = (jd - J2000) / 36525;\n  const omega = rad(\n    125.04452 - 1934.136261 * t + 0.0020708 * t * t + (t * t + t) / 450000,\n  );\n  const Lsun = rad(280.4665 + 36000.7698 * t);\n  const Lmoon = rad(218.3165 + 481267.8813 * t);\n\n  const nutation =\n    (-17.2 / 3600) * Math.sin(omega) -\n    (-1.32 / 3600) * Math.sin(2 * Lsun) -\n    (0.23 / 3600) * Math.sin(2 * Lmoon) +\n    deg((0.21 / 3600) * Math.sin(2 * omega));\n\n  const obliquity_zero =\n    23 +\n    26.0 / 60 +\n    21.448 / 3600 -\n    (46.815 / 3600) * t -\n    (0.00059 / 3600) * t * t +\n    (0.001813 / 3600) * t * t * t;\n  const obliquity_delta =\n    (9.2 / 3600) * Math.cos(omega) +\n    (0.57 / 3600) * Math.cos(2 * Lsun) +\n    (0.1 / 3600) * Math.cos(2 * Lmoon) -\n    (0.09 / 3600) * Math.cos(2 * omega);\n  const obliquity = obliquity_zero + obliquity_delta;\n\n  return {\n    nutation: rad(nutation),\n    obliquity: rad(obliquity),\n  };\n}\n\n/**\n * Get Earth's obliquity at a given date.\n * @param {Number} jd JD date\n * @return {Number} Obliquity in radians\n */\nexport function getObliquity(jd = J2000) {\n  return getNutationAndObliquity(jd).obliquity;\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/Coordinates.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "J2000",
    "memberof": "src/Coordinates.js",
    "static": true,
    "longname": "src/Coordinates.js~J2000",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Coordinates.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "sphericalToCartesian",
    "memberof": "src/Coordinates.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Coordinates.js~sphericalToCartesian",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Coordinates.js",
    "importStyle": "{sphericalToCartesian}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "ra",
        "types": [
          "*"
        ]
      },
      {
        "name": "dec",
        "types": [
          "*"
        ]
      },
      {
        "name": "dist",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "equatorialToEcliptic_Cartesian",
    "memberof": "src/Coordinates.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Coordinates.js~equatorialToEcliptic_Cartesian",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Coordinates.js",
    "importStyle": "{equatorialToEcliptic_Cartesian}",
    "description": "See https://en.wikipedia.org/wiki/Ecliptic_coordinate_system#Converting_Cartesian_vector",
    "lineNumber": 17,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "z",
        "types": [
          "*"
        ]
      },
      {
        "name": "tilt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "eclipticToEquatorial_Cartesian",
    "memberof": "src/Coordinates.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Coordinates.js~eclipticToEquatorial_Cartesian",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Coordinates.js",
    "importStyle": "{eclipticToEquatorial_Cartesian}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "z",
        "types": [
          "*"
        ]
      },
      {
        "name": "tilt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "getNutationAndObliquity",
    "memberof": "src/Coordinates.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Coordinates.js~getNutationAndObliquity",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Coordinates.js",
    "importStyle": "{getNutationAndObliquity}",
    "description": "Get Earth's obliquity and nutation at a given date.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "jd",
        "description": "JD date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Object with attributes \"obliquity\" and \"nutation\" provided\nin radians"
    }
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "getObliquity",
    "memberof": "src/Coordinates.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Coordinates.js~getObliquity",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Coordinates.js",
    "importStyle": "{getObliquity}",
    "description": "Get Earth's obliquity at a given date.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "jd",
        "description": "JD date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Obliquity in radians"
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/Ephem.js",
    "content": "const METERS_IN_AU = 149597870700;\nconst SECONDS_IN_DAY = 86400;\n\n// TODO(ian): Allow multiple valid attrs for a single quantity and map them\n// internally to a single canonical attribute.\nconst EPHEM_VALID_ATTRS = new Set([\n  'a', // Semi-major axis\n  'e', // Eccentricity\n  'i', // Inclination\n  'q', // Perihelion distance\n\n  'epoch',\n  'period', // in days\n  'tp', // time of perihelion\n\n  'ma', // Mean anomaly\n  'n', // Mean motion\n  'L', // Mean longitude\n\n  'om', // Longitude of Ascending Node\n  'w', // Argument of Perihelion = Longitude of Perihelion - Longitude of Ascending Node\n  'wBar', // Longitude of Perihelion = Longitude of Ascending Node + Argument of Perihelion\n\n  'GM', // Gravitational constant of more massive body\n]);\n\n// Which of these are angular measurements.\nconst ANGLE_UNITS = new Set(['i', 'ma', 'n', 'L', 'om', 'w', 'wBar']);\n\n// Returns true if object is defined.\nfunction isDef(obj) {\n  return typeof obj !== 'undefined';\n}\n\n/**\n * A class representing Kepler ephemerides.\n * @example\n * const NEPTUNE = new Ephem({\n *   epoch: 2458426.500000000,\n *   a: 3.009622263428050E+01,\n *   e: 7.362571187193770E-03,\n *   i: 1.774569249829094E+00,\n *   om: 1.318695882492132E+02,\n *   w: 2.586226409499831E+02,\n *   ma: 3.152804988924479E+02,\n * }, 'deg'),\n */\nexport class Ephem {\n  /**\n   * @param {Object} initialValues A dictionary of initial values. Not all values\n   * are required as some may be inferred from others.\n   * @param {Number} initialValues.a Semimajor axis\n   * @param {Number} initialValues.e Eccentricity\n   * @param {Number} initialValues.i Inclination\n   * @param {Number} initialValues.epoch Epoch in JD\n   * @param {Number} initialValues.period Period in days\n   * @param {Number} initialValues.ma Mean anomaly\n   * @param {Number} initialValues.n Mean motion\n   * @param {Number} initialValues.L Mean longitude\n   * @param {Number} initialValues.om Longitude of Ascending Node\n   * @param {Number} initialValues.w Argument of Perihelion\n   * @param {Number} initialValues.wBar Longitude of Perihelion\n   * @param {GM} initialValues.GM Standard gravitational parameter in km^3/s^2.\n   * Defaults to GM.SUN.  @see {GM}\n   * @param {'deg'|'rad'} units The unit of angles in the list of initial values.\n   */\n  constructor(initialValues, units = 'rad', locked = false) {\n    this._attrs = {};\n    this._locked = false;\n\n    for (const attr in initialValues) {\n      if (initialValues.hasOwnProperty(attr)) {\n        const actualUnits = ANGLE_UNITS.has(attr) ? units : null;\n        this.set(attr, initialValues[attr], actualUnits);\n      }\n    }\n\n    if (typeof this._attrs.GM === 'undefined') {\n      this._attrs.GM = GM.SUN;\n    }\n    this.fill();\n\n    this._locked = locked;\n  }\n\n  /**\n   * Sets an ephemerides attribute.\n   * @param {String} attr The name of the attribute (e.g. 'a')\n   * @param {Number} val The value of the attribute (e.g. 0.5)\n   * @param {'deg'|'rad'} units The unit of angle provided, if applicable.\n   */\n  set(attr, val, units = 'rad') {\n    if (this._locked) {\n      throw new Error('Attempted to modify locked (immutable) Ephem object');\n    }\n\n    if (!EPHEM_VALID_ATTRS.has(attr)) {\n      console.warn(`Invalid ephem attr: ${attr}`);\n      return false;\n    }\n\n    // Store everything in radians.\n    // TODO(ian): Make sure value can't be set with bogus units.\n    if (units === 'deg') {\n      this._attrs[attr] = (val * Math.PI) / 180;\n    } else {\n      this._attrs[attr] = val;\n    }\n    return true;\n  }\n\n  /**\n   * Gets an ephemerides attribute.\n   * @param {String} attr The name of the attribute (e.g. 'a')\n   * @param {'deg'|'rad'} units The unit of angle desired, if applicable. This\n   * input is ignored for values that are not angle measurements.\n   */\n  get(attr, units = 'rad') {\n    if (units === 'deg') {\n      return (this._attrs[attr] * 180) / Math.PI;\n    }\n    return this._attrs[attr];\n  }\n\n  /**\n   * @private\n   * Infers values of some ephemerides attributes if the required information\n   * is available.\n   */\n  fill() {\n    // Perihelion distance and semimajor axis\n    const e = this.get('e');\n    if (!isDef(e)) {\n      throw new Error('Must define eccentricity \"e\" in an orbit');\n    }\n\n    // Semimajor axis and perihelion distance\n    let a = this.get('a');\n    let q = this.get('q');\n    if (isDef(a)) {\n      if (!isDef(q)) {\n        if (e >= 1.0) {\n          throw new Error(\n            'Must provide perihelion distance \"q\" if eccentricity \"e\" is greater than 1',\n          );\n        }\n        q = a * (1.0 - e);\n        this.set('q', q);\n      }\n    } else if (isDef(q)) {\n      a = q / (1.0 - e);\n      this.set('a', a);\n    } else {\n      throw new Error(\n        'Must define semimajor axis \"a\" or perihelion distance \"q\" in an orbit',\n      );\n    }\n\n    // Longitude/Argument of Perihelion and Long. of Ascending Node\n    let w = this.get('w');\n    let wBar = this.get('wBar');\n    let om = this.get('om');\n    if (isDef(w) && isDef(om) && !isDef(wBar)) {\n      wBar = w + om;\n      this.set('wBar', wBar);\n    } else if (isDef(wBar) && isDef(om) && !isDef(w)) {\n      w = wBar - om;\n      this.set('w', w);\n    } else if (isDef(w) && isDef(wBar) && !isDef(om)) {\n      om = wBar - w;\n      this.set('om', om);\n    }\n\n    // Mean motion and period\n    const aMeters = a * METERS_IN_AU;\n    const n = this.get('n');\n    const GM = this.get('GM');\n    let period = this.get('period');\n\n    if (!isDef(period) && isDef(a)) {\n      period =\n        (2 * Math.PI * Math.sqrt((aMeters * aMeters * aMeters) / GM)) /\n        SECONDS_IN_DAY;\n      this.set('period', period);\n    }\n\n    if (isDef(period) && !isDef(n)) {\n      // Set radians\n      const newN = (2.0 * Math.PI) / period;\n      this.set('n', newN);\n    } else if (isDef(n) && !isDef(period)) {\n      this.set('period', (2.0 * Math.PI) / n);\n    }\n\n    // Mean longitude\n    const ma = this.get('ma');\n    let L = this.get('L');\n    if (!isDef(L) && isDef(om) && isDef(w) && isDef(ma)) {\n      L = om + w + ma;\n      this.set('L', L);\n    }\n\n    // Mean anomaly\n    if (!isDef(ma)) {\n      // MA = Mean longitude - Longitude of perihelion\n      this.set('ma', L - wBar);\n    }\n\n    //  TODO(ian): Handle no om\n  }\n\n  /**\n   * Make this ephem object immutable.\n   */\n  lock() {\n    this._locked = true;\n  }\n\n  copy() {\n    return new Ephem(\n      {\n        GM: this.get('GM'),\n        epoch: this.get('epoch'),\n        a: this.get('a'),\n        e: this.get('e'),\n        i: this.get('i'),\n        om: this.get('om'),\n        ma: this.get('ma'),\n        w: this.get('w'),\n      },\n      'rad',\n    );\n  }\n}\n\n/**\n * Standard gravitational parameter for objects orbiting these bodies.\n * Units in m^3/s^2\n */\nexport const GM = {\n  // See https://space.stackexchange.com/questions/22948/where-to-find-the-best-values-for-standard-gravitational-parameters-of-solar-sys and https://naif.jpl.nasa.gov/pub/naif/generic_kernels/pck/gm_de431.tpc\n  SUN: 1.3271244004193938e20,\n  MERCURY: 2.2031780000000021e13,\n  VENUS: 3.2485859200000006e14,\n  EARTH_MOON: 4.0350323550225981e14,\n  MARS: 4.2828375214000022e13,\n  JUPITER: 1.2671276480000021e17,\n  SATURN: 3.7940585200000003e16,\n  URANUS: 5.794548600000008e15,\n  NEPTUNE: 6.8365271005800236e15,\n  PLUTO_CHARON: 9.7700000000000068e11,\n};\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/Ephem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "METERS_IN_AU",
    "memberof": "src/Ephem.js",
    "static": true,
    "longname": "src/Ephem.js~METERS_IN_AU",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Ephem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "SECONDS_IN_DAY",
    "memberof": "src/Ephem.js",
    "static": true,
    "longname": "src/Ephem.js~SECONDS_IN_DAY",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Ephem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "EPHEM_VALID_ATTRS",
    "memberof": "src/Ephem.js",
    "static": true,
    "longname": "src/Ephem.js~EPHEM_VALID_ATTRS",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Ephem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "ANGLE_UNITS",
    "memberof": "src/Ephem.js",
    "static": true,
    "longname": "src/Ephem.js~ANGLE_UNITS",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Ephem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "isDef",
    "memberof": "src/Ephem.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Ephem.js~isDef",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Ephem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "class",
    "name": "Ephem",
    "memberof": "src/Ephem.js",
    "static": true,
    "longname": "src/Ephem.js~Ephem",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Ephem.js",
    "importStyle": "{Ephem}",
    "description": "A class representing Kepler ephemerides.",
    "examples": [
      "const NEPTUNE = new Ephem({\n  epoch: 2458426.500000000,\n  a: 3.009622263428050E+01,\n  e: 7.362571187193770E-03,\n  i: 1.774569249829094E+00,\n  om: 1.318695882492132E+02,\n  w: 2.586226409499831E+02,\n  ma: 3.152804988924479E+02,\n}, 'deg'),"
    ],
    "lineNumber": 48,
    "interface": false
  },
  {
    "__docId__": 80,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Ephem.js~Ephem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ephem.js~Ephem#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues",
        "description": "A dictionary of initial values. Not all values\nare required as some may be inferred from others."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.a",
        "description": "Semimajor axis"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.e",
        "description": "Eccentricity"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.i",
        "description": "Inclination"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.epoch",
        "description": "Epoch in JD"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.period",
        "description": "Period in days"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.ma",
        "description": "Mean anomaly"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.n",
        "description": "Mean motion"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.L",
        "description": "Mean longitude"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.om",
        "description": "Longitude of Ascending Node"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.w",
        "description": "Argument of Perihelion"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.wBar",
        "description": "Longitude of Perihelion"
      },
      {
        "nullable": null,
        "types": [
          "GM"
        ],
        "spread": false,
        "optional": false,
        "name": "initialValues.GM",
        "description": "Standard gravitational parameter in km^3/s^2.\nDefaults to GM.SUN.  @see {GM}"
      },
      {
        "nullable": null,
        "types": [
          "'deg'",
          "'rad'"
        ],
        "spread": false,
        "optional": false,
        "name": "units",
        "description": "The unit of angles in the list of initial values."
      }
    ]
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "_attrs",
    "memberof": "src/Ephem.js~Ephem",
    "static": false,
    "longname": "src/Ephem.js~Ephem#_attrs",
    "access": "private",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "_locked",
    "memberof": "src/Ephem.js~Ephem",
    "static": false,
    "longname": "src/Ephem.js~Ephem#_locked",
    "access": "private",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "set",
    "memberof": "src/Ephem.js~Ephem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ephem.js~Ephem#set",
    "access": "public",
    "description": "Sets an ephemerides attribute.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "attr",
        "description": "The name of the attribute (e.g. 'a')"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "The value of the attribute (e.g. 0.5)"
      },
      {
        "nullable": null,
        "types": [
          "'deg'",
          "'rad'"
        ],
        "spread": false,
        "optional": false,
        "name": "units",
        "description": "The unit of angle provided, if applicable."
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "get",
    "memberof": "src/Ephem.js~Ephem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ephem.js~Ephem#get",
    "access": "public",
    "description": "Gets an ephemerides attribute.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "attr",
        "description": "The name of the attribute (e.g. 'a')"
      },
      {
        "nullable": null,
        "types": [
          "'deg'",
          "'rad'"
        ],
        "spread": false,
        "optional": false,
        "name": "units",
        "description": "The unit of angle desired, if applicable. This\ninput is ignored for values that are not angle measurements."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "fill",
    "memberof": "src/Ephem.js~Ephem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ephem.js~Ephem#fill",
    "access": "private",
    "description": "",
    "lineNumber": 130,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "lock",
    "memberof": "src/Ephem.js~Ephem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ephem.js~Ephem#lock",
    "access": "public",
    "description": "Make this ephem object immutable.",
    "lineNumber": 215,
    "params": [],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "copy",
    "memberof": "src/Ephem.js~Ephem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ephem.js~Ephem#copy",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "GM",
    "memberof": "src/Ephem.js",
    "static": true,
    "longname": "src/Ephem.js~GM",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Ephem.js",
    "importStyle": "{GM}",
    "description": "Standard gravitational parameter for objects orbiting these bodies.\nUnits in m^3/s^2",
    "lineNumber": 240,
    "type": {
      "types": [
        "{\"SUN\": number, \"MERCURY\": number, \"VENUS\": number, \"EARTH_MOON\": number, \"MARS\": number, \"JUPITER\": number, \"SATURN\": number, \"URANUS\": number, \"NEPTUNE\": number, \"PLUTO_CHARON\": number}"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/EphemPresets.js",
    "content": "import { Ephem, GM } from './Ephem';\nimport { getFullUrl } from './util';\nimport { kmToAu } from './Units';\n\n/**\n * A dictionary containing ephemerides of planets and other well-known objects.\n * @example\n * const planet1 = viz.createObject('planet1', {\n *   ephem: EphemPresets.MERCURY,\n * });\n */\nexport const EphemPresets = {\n  // See https://ssd.jpl.nasa.gov/?planet_pos and https://ssd.jpl.nasa.gov/txt/p_elem_t1.txt\n  MERCURY: new Ephem(\n    {\n      epoch: 2458426.5,\n      a: 3.870968969437096e-1,\n      e: 2.056515875393916e-1,\n      i: 7.003891682749818,\n      om: 4.830774804443502e1,\n      w: 2.917940253442659e1,\n      ma: 2.56190975209273e2,\n    },\n    'deg',\n    true /* locked */,\n  ),\n  VENUS: new Ephem(\n    {\n      epoch: 2458426.5,\n      a: 7.233458663591554e-1,\n      e: 6.762510759617694e-3,\n      i: 3.394567787211735,\n      om: 7.662534150657346e1,\n      w: 5.474567447560867e1,\n      ma: 2.756687596099721e2,\n    },\n    'deg',\n    true /* locked */,\n  ),\n  EARTH: new Ephem(\n    {\n      // Taken from https://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html\n      /*\n    epoch: 2451545.0,\n    a: 1.00000011,\n    e: 0.01671022,\n    i: 0.00005,\n    om: -11.26064,\n    wBar: 102.94719,\n    L: 100.46435,\n    */\n\n      // https://ssd.jpl.nasa.gov/txt/p_elem_t1.txt\n      epoch: 2451545.0,\n      a: 1.00000261,\n      e: 0.01671123,\n      i: -0.00001531,\n      om: 0.0,\n      wBar: 102.93768193,\n      L: 100.46457166,\n\n      /*\n      epoch: 2458426.500000000,\n      a: 1.000618919441359E+00,\n      e: 1.676780871638673E-02,\n      i: 0,\n      om: 1.888900932218542E+02,\n      w: 2.718307282052625E+02,\n      ma: 3.021792498388233E+02,\n     */\n    },\n    'deg',\n    true /* locked */,\n  ),\n  MOON: new Ephem(\n    {\n      // https://nssdc.gsfc.nasa.gov/planetary/factsheet/moonfact.html\n      GM: 0.3986e6,\n\n      // Geocentric\n      // https://ssd.jpl.nasa.gov/horizons.cgi#results\n      epoch: 2458621.5,\n      a: 2.582517063772124e-3,\n      e: 4.582543645168888e-2,\n      i: 5.102060246928811,\n      om: 1.085916732144811e2,\n      w: 6.180561793729225e1,\n      ma: 5.053270083636792e1,\n      /*\n     * heliocentric\n    epoch: 2458621.500000000,\n    a: 1.078855621785179E+00,\n    e: 6.333300212090676E-02,\n    i: 7.211217382317713E-02,\n    om: 6.722057157026397E+01,\n    w: 1.503642883585293E+02,\n    ma: 1.666758688084831E+01,\n   */\n    },\n    'deg',\n    true /* locked */,\n  ),\n  MARS: new Ephem(\n    {\n      epoch: 2458426.5,\n      a: 1.52371401537107,\n      e: 9.336741335309606e-2,\n      i: 1.848141099825311,\n      om: 4.950420572080223e1,\n      w: 2.866965847685386e2,\n      ma: 2.538237617924876e1,\n    },\n    'deg',\n    true /* locked */,\n  ),\n  JUPITER: new Ephem(\n    {\n      epoch: 2458426.5,\n      a: 5.20180355911023,\n      e: 4.89912558249006e-2,\n      i: 1.303560894624275,\n      om: 1.005203828847816e2,\n      w: 2.73736301845404e2,\n      ma: 2.31939544389401e2,\n    },\n    'deg',\n    true /* locked */,\n  ),\n  SATURN: new Ephem(\n    {\n      epoch: 2458426.5,\n      a: 9.577177295536776,\n      e: 5.101889921719987e-2,\n      i: 2.482782449972317,\n      om: 1.136154964073247e2,\n      w: 3.394422648650336e2,\n      ma: 1.870970898012944e2,\n    },\n    'deg',\n    true /* locked */,\n  ),\n  URANUS: new Ephem(\n    {\n      epoch: 2458426.5,\n      a: 1.914496966635462e1,\n      e: 4.832662948112808e-2,\n      i: 7.697511134483724e-1,\n      om: 7.414239045667875e1,\n      w: 9.942704504702185e1,\n      ma: 2.202603033874267e2,\n    },\n    'deg',\n    true /* locked */,\n  ),\n  NEPTUNE: new Ephem(\n    {\n      epoch: 2458426.5,\n      a: 3.00962226342805e1,\n      e: 7.36257118719377e-3,\n      i: 1.774569249829094,\n      om: 1.318695882492132e2,\n      w: 2.586226409499831e2,\n      ma: 3.152804988924479e2,\n    },\n    'deg',\n    true /* locked */,\n  ),\n  PLUTO: new Ephem(\n    {\n      epoch: 2454000.5,\n      a: 39.4450697257,\n      e: 0.250248713478,\n      i: 17.0890009196,\n      om: 110.376957955,\n      w: 112.597141677,\n      ma: 25.2471897122,\n    },\n    'deg',\n    true /* locked */,\n  ),\n};\n\n/**\n * A class for fetching orbital elements of natural satellites in our solar\n * system.\n */\nexport class NaturalSatellites {\n  constructor(contextOrSimulation) {\n    if (true) {\n      // User passed in Simulation\n      this._simulation = contextOrSimulation;\n      this._context = contextOrSimulation.getContext();\n    } else {\n      // User just passed in options\n      this._simulation = null;\n      this._context = contextOrSimulation;\n    }\n\n    this._satellitesByPlanet = {};\n    this._readyPromise = null;\n\n    this.init();\n  }\n\n  init() {\n    const dataUrl = getFullUrl(\n      '{{data}}/processed/natural-satellites.json',\n      this._context.options.basePath,\n    );\n\n    this._readyPromise = new Promise((resolve, reject) => {\n      fetch(dataUrl)\n        .then(resp => resp.json())\n        .then(moons => {\n          moons.forEach(moon => {\n            const planetName = moon.Planet.toLowerCase();\n            if (!this._satellitesByPlanet[planetName]) {\n              this._satellitesByPlanet[planetName] = [];\n            }\n\n            let ephemType;\n            switch (moon['Element Type']) {\n              case 'Ecliptic':\n                // Don't have to do anything\n                break;\n              case 'Equatorial':\n                // TODO(ian): Convert equatorial coords\n                ephemType = 'equatorial';\n                break;\n              case 'Laplace':\n                // TODO(ian): Convert laplace coords\n                ephemType = 'equatorial';\n                break;\n              default:\n                console.error(\n                  'Unknown element type in natural satellites object:',\n                  moon,\n                );\n                return;\n            }\n\n            let ephemGM;\n            switch (moon.Planet) {\n              case 'Earth':\n                ephemGM = GM.EARTH_MOON;\n                break;\n              case 'Pluto':\n                ephemGM = GM.PLUTO_CHARON;\n                break;\n              default:\n                ephemGM = GM[moon.Planet.toUpperCase()];\n            }\n            if (!ephemGM) {\n              console.error(`Could not look up GM for ${moon.Planet}`);\n            }\n\n            const ephem = new Ephem(\n              {\n                GM: ephemGM,\n                epoch: moon['Epoch JD'],\n                a: kmToAu(moon.a),\n                e: parseFloat(moon.e),\n                i: parseFloat(moon.i),\n                w: parseFloat(moon.w),\n                om: parseFloat(moon.node),\n                ma: parseFloat(moon.M),\n              },\n              'deg',\n              true /* locked */,\n            );\n\n            this._satellitesByPlanet[planetName].push({\n              name: moon['Sat.'],\n              elementType: moon['Element Type'],\n              tags: new Set(moon['tags'].split(',')),\n              ephem,\n            });\n          });\n          console.info('Loaded', moons.length, 'natural satellites');\n          resolve(this);\n        })\n        .catch(err => {\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Get a list of satellites and their orbital elements for a given planet.\n   * @param {String} planetName Name of a planet, e.g. \"Jupiter\"\n   * @return {Object} List containing a list of dictionaries with information\n   * on each satellite.\n   */\n  getSatellitesForPlanet(planetName) {\n    return this._satellitesByPlanet[planetName.toLowerCase()];\n  }\n\n  load() {\n    return this._readyPromise;\n  }\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/EphemPresets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "EphemPresets",
    "memberof": "src/EphemPresets.js",
    "static": true,
    "longname": "src/EphemPresets.js~EphemPresets",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/EphemPresets.js",
    "importStyle": "{EphemPresets}",
    "description": "A dictionary containing ephemerides of planets and other well-known objects.",
    "examples": [
      "const planet1 = viz.createObject('planet1', {\n  ephem: EphemPresets.MERCURY,\n});"
    ],
    "lineNumber": 12,
    "type": {
      "types": [
        "{\"MERCURY\": *, \"VENUS\": *, \"EARTH\": *, \"MOON\": *, \"MARS\": *, \"JUPITER\": *, \"SATURN\": *, \"URANUS\": *, \"NEPTUNE\": *, \"PLUTO\": *}"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "class",
    "name": "NaturalSatellites",
    "memberof": "src/EphemPresets.js",
    "static": true,
    "longname": "src/EphemPresets.js~NaturalSatellites",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/EphemPresets.js",
    "importStyle": "{NaturalSatellites}",
    "description": "A class for fetching orbital elements of natural satellites in our solar\nsystem.",
    "lineNumber": 187,
    "interface": false
  },
  {
    "__docId__": 94,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/EphemPresets.js~NaturalSatellites",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/EphemPresets.js~NaturalSatellites#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "_simulation",
    "memberof": "src/EphemPresets.js~NaturalSatellites",
    "static": false,
    "longname": "src/EphemPresets.js~NaturalSatellites#_simulation",
    "access": "private",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "_context",
    "memberof": "src/EphemPresets.js~NaturalSatellites",
    "static": false,
    "longname": "src/EphemPresets.js~NaturalSatellites#_context",
    "access": "private",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "_satellitesByPlanet",
    "memberof": "src/EphemPresets.js~NaturalSatellites",
    "static": false,
    "longname": "src/EphemPresets.js~NaturalSatellites#_satellitesByPlanet",
    "access": "private",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "_readyPromise",
    "memberof": "src/EphemPresets.js~NaturalSatellites",
    "static": false,
    "longname": "src/EphemPresets.js~NaturalSatellites#_readyPromise",
    "access": "private",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "init",
    "memberof": "src/EphemPresets.js~NaturalSatellites",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/EphemPresets.js~NaturalSatellites#init",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "getSatellitesForPlanet",
    "memberof": "src/EphemPresets.js~NaturalSatellites",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/EphemPresets.js~NaturalSatellites#getSatellitesForPlanet",
    "access": "public",
    "description": "Get a list of satellites and their orbital elements for a given planet.",
    "lineNumber": 294,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "planetName",
        "description": "Name of a planet, e.g. \"Jupiter\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "List containing a list of dictionaries with information\non each satellite."
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "load",
    "memberof": "src/EphemPresets.js~NaturalSatellites",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/EphemPresets.js~NaturalSatellites#load",
    "access": "public",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/KeplerParticles.js",
    "content": "import * as THREE from 'three';\n\nimport { getThreeJsTexture } from './util';\n\nimport { getOrbitShaderVertex, getOrbitShaderFragment } from './shaders';\nimport { getOrbitType, OrbitType } from './Orbit';\n\nconst DEFAULT_PARTICLE_COUNT = 4096;\n\n/**\n * Compute mean anomaly at date.  Used for elliptical and hyperbolic orbits.\n */\nfunction getM(ephem, jd) {\n  const d = jd - ephem.get('epoch');\n  return ephem.get('ma') + ephem.get('n') * d;\n}\n\nconst PARABOLIC_K = 0.01720209895;\nfunction getA0(ephem, jd) {\n  const tp = ephem.get('tp');\n  const e = ephem.get('e');\n  const q = ephem.get('q');\n  const d = jd - tp;\n  return 0.75 * d * PARABOLIC_K * Math.sqrt((1 + e) / (q * q * q));\n}\n\n/**\n * An efficient way to render many objects in space with Kepler orbits.\n * Primarily used by Simulation to render all non-static objects.\n * @see Simulation\n */\nexport class KeplerParticles {\n  /**\n   * @param {Object} options Options container\n   * @param {Object} options.textureUrl Template url for sprite\n   * @param {Object} options.basePath Base path for simulation supporting files\n   * @param {Number} options.jd JD date value\n   * @param {Number} options.maxNumParticles Maximum number of particles to display. Defaults to 4096\n   * @param {Number} options.defaultSize Default size of particles. Note this\n   * can be overriden by SpaceObject particleSize. Defaults to 25\n   * @param {Object} contextOrSimulation Simulation context or object\n   */\n  constructor(options, contextOrSimulation) {\n    this._options = options;\n\n    this._id = `KeplerParticles__${KeplerParticles.instanceCount}`;\n\n    // TODO(ian): Add to ctx\n    if (true) {\n      // User passed in Simulation\n      this._simulation = contextOrSimulation;\n      this._context = contextOrSimulation.getContext();\n    } else {\n      // User just passed in options\n      this._simulation = null;\n      this._context = contextOrSimulation;\n    }\n\n    // Whether Points object has been added to the Simulation/Scene. This\n    // happens lazily when the first data point is added in order to prevent\n    // WebGL render warnings.\n    this._addedToScene = false;\n\n    // Number of particles in the scene.\n    this._particleCount = 0;\n\n    this._elements = null;\n    this._attributes = null;\n    this._uniforms = null;\n    this._geometry = null;\n    this._shaderMaterial = null;\n    this._particleSystem = null;\n\n    this.init();\n  }\n\n  /**\n   * @private\n   */\n  init() {\n    this.createParticleSystem();\n  }\n\n  /**\n   * @private\n   */\n  createParticleSystem() {\n    const defaultMapTexture = getThreeJsTexture(\n      this._options.textureUrl,\n      this._context.options.basePath,\n    );\n\n    this._uniforms = {\n      texture: { value: defaultMapTexture },\n    };\n\n    const particleCount =\n      this._options.maxNumParticles || DEFAULT_PARTICLE_COUNT;\n    this._elements = [];\n    this._attributes = {\n      size: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n      origin: new THREE.BufferAttribute(new Float32Array(particleCount * 3), 3),\n      position: new THREE.BufferAttribute(\n        new Float32Array(particleCount * 3),\n        3,\n      ),\n      fuzzColor: new THREE.BufferAttribute(\n        new Float32Array(particleCount * 3),\n        3,\n      ),\n\n      a: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n      e: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n      i: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n      om: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n      ma: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n      n: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n      w: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n      wBar: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n      q: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n\n      M: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n      a0: new THREE.BufferAttribute(new Float32Array(particleCount), 1),\n    };\n\n    const geometry = new THREE.BufferGeometry();\n    geometry.setDrawRange(0, 0);\n    Object.keys(this._attributes).forEach(attributeName => {\n      const attribute = this._attributes[attributeName];\n      // attribute.setDynamic(true);\n      geometry.addAttribute(attributeName, attribute);\n    });\n\n    const shader = new THREE.ShaderMaterial({\n      uniforms: this._uniforms,\n      vertexShader: getOrbitShaderVertex(),\n      fragmentShader: getOrbitShaderFragment(),\n\n      depthTest: true,\n      depthWrite: false,\n      transparent: true,\n    });\n\n    this._shaderMaterial = shader;\n    this._geometry = geometry;\n    this._particleSystem = new THREE.Points(geometry, shader);\n  }\n\n  /**\n   * Add a particle to this particle system.\n   * @param {Ephem} ephem Kepler ephemeris\n   * @param {Object} options Options container\n   * @param {Number} options.particleSize Size of particles\n   * @param {Number} options.color Color of particles\n   * @return {Number} The index of this article in the attribute list.\n   */\n  addParticle(ephem, options = {}) {\n    this._elements.push(ephem);\n    const attributes = this._attributes;\n    const offset = this._particleCount++;\n\n    attributes.size.set(\n      [options.particleSize || this._options.defaultSize || 15],\n      offset,\n    );\n    const color = new THREE.Color(options.color || 0xffffff);\n    attributes.fuzzColor.set([color.r, color.g, color.b], offset * 3);\n\n    attributes.origin.set([0, 0, 0], offset * 3);\n\n    attributes.a.set([ephem.get('a')], offset);\n    attributes.e.set([ephem.get('e')], offset);\n    attributes.i.set([ephem.get('i', 'rad')], offset);\n    attributes.om.set([ephem.get('om', 'rad')], offset);\n    attributes.wBar.set([ephem.get('wBar', 'rad')], offset);\n    attributes.q.set([ephem.get('q')], offset);\n\n    attributes.M.set([getM(ephem, this._options.jd || 0)], offset);\n    attributes.a0.set([getA0(ephem, this._options.jd || 0)], offset);\n\n    // TODO(ian): Set the update range\n    for (const attributeKey in attributes) {\n      if (attributes.hasOwnProperty(attributeKey)) {\n        attributes[attributeKey].needsUpdate = true;\n      }\n    }\n    this._geometry.setDrawRange(0, this._particleCount);\n\n    if (!this._addedToScene && this._simulation) {\n      // This happens lazily when the first data point is added in order to\n      // prevent WebGL render warnings.\n      this._simulation.addObject(this);\n      this._addedToScene = true;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Change the `origin` attribute of a particle.\n   * @param {Number} offset The location of this particle in the attributes * array.\n   * @param {Array.<Number>} newOrigin The new XYZ coordinates of the body that this particle orbits.\n   */\n  setParticleOrigin(offset, newOrigin) {\n    this._attributes.origin.set(newOrigin, offset * 3);\n    this._attributes.origin.needsUpdate = true;\n  }\n\n  /**\n   * Update the position for all particles\n   * @param {Number} jd JD date\n   */\n  update(jd) {\n    const Ms = [];\n    const a0s = [];\n    for (let i = 0; i < this._elements.length; i++) {\n      const ephem = this._elements[i];\n\n      let M, a0;\n      if (getOrbitType(ephem) === OrbitType.PARABOLIC) {\n        a0 = getA0(ephem, jd);\n        M = 0;\n      } else {\n        a0 = 0;\n        M = getM(ephem, jd);\n      }\n\n      Ms.push(M);\n      a0s.push(a0);\n    }\n\n    this._attributes.M.set(Ms);\n    this._attributes.M.needsUpdate = true;\n\n    this._attributes.a0.set(a0s);\n    this._attributes.a0.needsUpdate = true;\n  }\n\n  /**\n   * Get THREE.js objects that comprise this point cloud\n   * @return {Array.<THREE.Object>} List of objects to add to THREE.js scene\n   */\n  get3jsObjects() {\n    return [this._particleSystem];\n  }\n\n  /**\n   * Get unique id for this object.\n   * @return {String} Unique id\n   */\n  getId() {\n    return this._id;\n  }\n}\n\nKeplerParticles.instanceCount = 0;\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/KeplerParticles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "DEFAULT_PARTICLE_COUNT",
    "memberof": "src/KeplerParticles.js",
    "static": true,
    "longname": "src/KeplerParticles.js~DEFAULT_PARTICLE_COUNT",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/KeplerParticles.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "getM",
    "memberof": "src/KeplerParticles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/KeplerParticles.js~getM",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/KeplerParticles.js",
    "importStyle": null,
    "description": "Compute mean anomaly at date.  Used for elliptical and hyperbolic orbits.",
    "lineNumber": 13,
    "params": [
      {
        "name": "ephem",
        "types": [
          "*"
        ]
      },
      {
        "name": "jd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "PARABOLIC_K",
    "memberof": "src/KeplerParticles.js",
    "static": true,
    "longname": "src/KeplerParticles.js~PARABOLIC_K",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/KeplerParticles.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "getA0",
    "memberof": "src/KeplerParticles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/KeplerParticles.js~getA0",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/KeplerParticles.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "ephem",
        "types": [
          "*"
        ]
      },
      {
        "name": "jd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "KeplerParticles",
    "memberof": "src/KeplerParticles.js",
    "static": true,
    "longname": "src/KeplerParticles.js~KeplerParticles",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/KeplerParticles.js",
    "importStyle": "{KeplerParticles}",
    "description": "An efficient way to render many objects in space with Kepler orbits.\nPrimarily used by Simulation to render all non-static objects.",
    "see": [
      "Simulation"
    ],
    "lineNumber": 32,
    "interface": false
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options container"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.textureUrl",
        "description": "Template url for sprite"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.basePath",
        "description": "Base path for simulation supporting files"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jd",
        "description": "JD date value"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.maxNumParticles",
        "description": "Maximum number of particles to display. Defaults to 4096"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.defaultSize",
        "description": "Default size of particles. Note this\ncan be overriden by SpaceObject particleSize. Defaults to 25"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "contextOrSimulation",
        "description": "Simulation context or object"
      }
    ]
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "_options",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_options",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "_id",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_id",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "_simulation",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_simulation",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "_context",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_context",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "_addedToScene",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_addedToScene",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "_particleCount",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_particleCount",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "_elements",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_elements",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "_attributes",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_attributes",
    "access": "private",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "_uniforms",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_uniforms",
    "access": "private",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "_geometry",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_geometry",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "_shaderMaterial",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_shaderMaterial",
    "access": "private",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "_particleSystem",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#_particleSystem",
    "access": "private",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "init",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#init",
    "access": "private",
    "description": "",
    "lineNumber": 80,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "createParticleSystem",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#createParticleSystem",
    "access": "private",
    "description": "",
    "lineNumber": 87,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "addParticle",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#addParticle",
    "access": "public",
    "description": "Add a particle to this particle system.",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "Ephem"
        ],
        "spread": false,
        "optional": false,
        "name": "ephem",
        "description": "Kepler ephemeris"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options container"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.particleSize",
        "description": "Size of particles"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.color",
        "description": "Color of particles"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The index of this article in the attribute list."
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "setParticleOrigin",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#setParticleOrigin",
    "access": "public",
    "description": "Change the `origin` attribute of a particle.",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "The location of this particle in the attributes * array."
      },
      {
        "nullable": null,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "newOrigin",
        "description": "The new XYZ coordinates of the body that this particle orbits."
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "update",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#update",
    "access": "public",
    "description": "Update the position for all particles",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "jd",
        "description": "JD date"
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "get3jsObjects",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#get3jsObjects",
    "access": "public",
    "description": "Get THREE.js objects that comprise this point cloud",
    "lineNumber": 243,
    "return": {
      "nullable": null,
      "types": [
        "Array.<THREE.Object>"
      ],
      "spread": false,
      "description": "List of objects to add to THREE.js scene"
    },
    "params": []
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "getId",
    "memberof": "src/KeplerParticles.js~KeplerParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/KeplerParticles.js~KeplerParticles#getId",
    "access": "public",
    "description": "Get unique id for this object.",
    "lineNumber": 251,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Unique id"
    },
    "params": []
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/Orbit.js",
    "content": "import * as THREE from 'three';\nimport julian from 'julian';\n\nimport { rescaleXYZ } from './Scale';\n\nconst pi = Math.PI;\nconst sin = Math.sin;\nconst cos = Math.cos;\nconst sqrt = Math.sqrt;\n\n/**\n * Special cube root function that assumes input is always positive.\n */\nfunction cbrt(x) {\n  return Math.exp(Math.log(x) / 3.0);\n}\n\n/**\n * Enum of orbital types.\n */\nexport const OrbitType = Object.freeze({\n  PARABOLIC: 1,\n  HYPERBOLIC: 2,\n  ELLIPTICAL: 3,\n  UNKNOWN: 4,\n});\n\n/**\n * Get the type of orbit. Returns one of OrbitType.PARABOLIC, HYPERBOLIC,\n * ELLIPTICAL, or UNKNOWN.\n * @return {OrbitType} Name of orbit type\n */\nexport function getOrbitType(ephem) {\n  let e = ephem.get('e');\n  if (e > 0.8 && e < 1.2) {\n    return OrbitType.PARABOLIC;\n  } else if (e > 1.2) {\n    return OrbitType.HYPERBOLIC;\n  } else {\n    return OrbitType.ELLIPTICAL;\n  }\n  return OrbitType.UNKNOWN;\n}\n\n/**\n * A class that builds a visual representation of a Kepler orbit.\n * @example\n * const orbit = new Spacekit.Orbit({\n *   ephem: new Spacekit.Ephem({...}),\n *   options: {\n *     color: 0xFFFFFF,\n *     eclipticLineColor: 0xCCCCCC,\n *   },\n * });\n */\nexport class Orbit {\n  /**\n   * @param {Ephem} ephem The ephemerides that define this orbit.\n   * @param {Object} options\n   * @param {Object} options.color The color of the orbital ellipse.\n   * @param {Object} options.eclipticLineColor The color of lines drawn\n   * perpendicular to the ecliptic in order to illustrate depth (defaults to\n   * 0x333333).\n   */\n  constructor(ephem, options) {\n    /**\n     * Ephem object\n     * @type {Ephem}\n     */\n    this._ephem = ephem;\n\n    /**\n     * Options (see class definition for details)\n     */\n    this._options = options || {};\n\n    /**\n     * Cached orbital points.\n     * @type {Array.<THREE.Vector3>}\n     */\n    this._ellipsePoints = null;\n\n    /**\n     * Cached ellipse.\n     * @type {THREE.Line}\n     */\n    this._orbitShape = null;\n  }\n\n  /**\n   * Get heliocentric position of object at a given JD.\n   * @param {Number} jd Date value in JD.\n   * @param {boolean} debug Set true for debug output.\n   * @return {Array.<Number>} [X, Y, Z] coordinates\n   */\n  getPositionAtTime(jd, debug) {\n    // Note: logic below must match the vertex shader.\n\n    // This position calculation is used to create orbital ellipses.\n    switch (getOrbitType(this._ephem)) {\n      case OrbitType.PARABOLIC:\n        return this.getPositionAtTimeNearParabolic(jd, debug);\n      case OrbitType.HYPERBOLIC:\n        return this.getPositionAtTimeHyperbolic(jd, debug);\n      case OrbitType.ELLIPTICAL:\n        return this.getPositionAtTimeElliptical(jd, debug);\n    }\n    throw new Error('No handler for this type of orbit');\n  }\n\n  getPositionAtTimeParabolic(jd, debug) {\n    // See https://stjarnhimlen.se/comp/ppcomp.html#17\n    const eph = this._ephem;\n\n    // The Guassian gravitational constant\n    const k = 0.01720209895;\n\n    // Perihelion distance\n    const q = eph.get('q');\n\n    // Compute time since perihelion\n    const d = jd - eph.get('tp');\n\n    const H = (d * (k / sqrt(2))) / sqrt(q * q * q);\n    const h = 1.5 * H;\n    const g = sqrt(1.0 + h * h);\n    const s = cbrt(g + h) - cbrt(g - h);\n\n    // True anomaly\n    const v = 2.0 * Math.atan(s);\n    // Heliocentric distance\n    const r = q * (1.0 + s * s);\n\n    return this.vectorToHeliocentric(v, r);\n  }\n\n  getPositionAtTimeNearParabolic(jd, debug) {\n    // See https://stjarnhimlen.se/comp/ppcomp.html#17\n    const eph = this._ephem;\n\n    // The Guassian gravitational constant\n    const k = 0.01720209895;\n\n    // Eccentricity\n    const e = eph.get('e');\n\n    // Perihelion distance\n    const q = eph.get('q');\n\n    // Compute time since perihelion\n    const d = jd - eph.get('tp');\n\n    const a = 0.75 * d * k * sqrt((1 + e) / (q * q * q));\n    const b = sqrt(1 + a * a);\n    const W = cbrt(b + a) - cbrt(b - a);\n    const f = (1 - e) / (1 + e);\n\n    const a1 = 2 / 3 + (2 / 5) * W * W;\n    const a2 = 7 / 5 + (33 / 35) * W * W + (37 / 175) * W ** 4;\n    const a3 =\n      W * W * (432 / 175 + (956 / 1125) * W * W + (84 / 1575) * W ** 4);\n\n    const C = (W * W) / (1 + W * W);\n    const g = f * C * C;\n    const w = W * (1 + f * C * (a1 + a2 * g + a3 * g * g));\n\n    // True anomaly\n    const v = 2 * Math.atan(w);\n    // Heliocentric distance\n    const r = (q * (1 + w * w)) / (1 + w * w * f);\n\n    return this.vectorToHeliocentric(v, r);\n  }\n\n  getPositionAtTimeHyperbolic(jd, debug) {\n    // See https://stjarnhimlen.se/comp/ppcomp.html#17\n    const eph = this._ephem;\n\n    // Eccentricity\n    const e = eph.get('e');\n\n    // Perihelion distance\n    const q = eph.get('q');\n\n    // Semimajor axis\n    const a = eph.get('a');\n\n    // Mean anomaly\n    const ma = eph.get('ma');\n\n    // Calculate mean anomaly at jd\n    const n = eph.get('n', 'rad');\n    const epoch = eph.get('epoch');\n    const d = jd - epoch;\n\n    const M = ma + n * d;\n\n    let F0 = M;\n    for (let count = 0; count < 100; count++) {\n      const F1 =\n        (M + e * (F0 * Math.cosh(F0) - Math.sinh(F0))) /\n        (e * Math.cosh(F0) - 1);\n      const lastdiff = Math.abs(F1 - F0);\n      F0 = F1;\n\n      if (lastdiff < 0.0000001) {\n        break;\n      }\n    }\n    const F = F0;\n\n    const v = 2 * Math.atan(sqrt((e + 1) / (e - 1))) * Math.tanh(F / 2);\n    const r = (a * (1 - e * e)) / (1 + e * cos(v));\n\n    return this.vectorToHeliocentric(v, r);\n  }\n\n  getPositionAtTimeElliptical(jd, debug) {\n    const eph = this._ephem;\n\n    // Eccentricity\n    const e = eph.get('e');\n\n    // Mean anomaly\n    const ma = eph.get('ma', 'rad');\n\n    // Calculate mean anomaly at jd\n    const n = eph.get('n', 'rad');\n    const epoch = eph.get('epoch');\n    const d = jd - epoch;\n\n    const M = ma + n * d;\n    if (debug) {\n      console.info('period=', eph.get('period'));\n      console.info('n=', n);\n      console.info('ma=', ma);\n      console.info('d=', d);\n      console.info('M=', M);\n    }\n\n    // Estimate eccentric and true anom using iterative approx\n    let E0 = M;\n    for (let count = 0; count < 100; count++) {\n      const E1 = M + e * sin(E0);\n      const lastdiff = Math.abs(E1 - E0);\n      E0 = E1;\n\n      if (lastdiff < 0.0000001) {\n        break;\n      }\n    }\n    const E = E0;\n    const v = 2 * Math.atan(sqrt((1 + e) / (1 - e)) * Math.tan(E / 2));\n\n    // Radius vector, in AU\n    const a = eph.get('a');\n    const r = (a * (1 - e * e)) / (1 + e * cos(v));\n\n    return this.vectorToHeliocentric(v, r);\n  }\n\n  /**\n   * Given true anomaly and heliocentric distance, returns the scaled heliocentric coordinates (X, Y, Z)\n   * @param {Number} v True anomaly\n   * @param {Number} r Heliocentric distance\n   * @return {Array.<Number>} Heliocentric coordinates\n   */\n  vectorToHeliocentric(v, r) {\n    const eph = this._ephem;\n\n    // Inclination, Longitude of ascending node, Longitude of perihelion\n    const i = eph.get('i', 'rad');\n    const o = eph.get('om', 'rad');\n    const p = eph.get('wBar', 'rad');\n\n    // Heliocentric coords\n    const X = r * (cos(o) * cos(v + p - o) - sin(o) * sin(v + p - o) * cos(i));\n    const Y = r * (sin(o) * cos(v + p - o) + cos(o) * sin(v + p - o) * cos(i));\n    const Z = r * (sin(v + p - o) * sin(i));\n\n    return rescaleXYZ(X, Y, Z);\n  }\n\n  getOrbitShape() {\n    // For hyperbolic and parabolic orbits, decide on a time range to draw\n    // them.\n    // TODO(ian): Should we compute around current position, not time of perihelion?\n    const tp = this._ephem.get('tp');\n    const centerDate = tp ? julian.toDate(tp) : new Date();\n\n    // Default to +- 10 years\n    // TODO(ian): A way to configure this logic\n    const startJd = julian.toJulianDay(\n      new Date(\n        centerDate.getFullYear() - 10,\n        centerDate.getMonth(),\n        centerDate.getDate(),\n      ),\n    );\n    const endJd = julian.toJulianDay(\n      new Date(\n        centerDate.getFullYear() + 10,\n        centerDate.getMonth(),\n        centerDate.getDate(),\n      ),\n    );\n\n    switch (getOrbitType(this._ephem)) {\n      case OrbitType.HYPERBOLIC:\n        return this.getLine(\n          this.getPositionAtTimeHyperbolic.bind(this),\n          startJd,\n          endJd,\n        );\n      case OrbitType.PARABOLIC:\n        return this.getLine(\n          this.getPositionAtTimeNearParabolic.bind(this),\n          startJd,\n          endJd,\n        );\n      case OrbitType.ELLIPTICAL:\n        return this.getEllipse();\n    }\n    throw new Error('Unknown orbit shape');\n  }\n\n  /**\n   * Compute a line between a given date range.\n   */\n  getLine(orbitFn, startJd, endJd, step) {\n    if (this._orbitShape) {\n      return this._orbitShape;\n    }\n\n    const loopStep = step ? step : (endJd - startJd) / 1000.0;\n    const points = [];\n    for (let jd = startJd; jd <= endJd; jd += loopStep) {\n      const pos = orbitFn(jd);\n      points.push(new THREE.Vector3(pos[0], pos[1], pos[2]));\n    }\n    console.info('Computed', points.length, 'segements for line orbit');\n\n    const pointsGeometry = new THREE.Geometry();\n    pointsGeometry.vertices = points;\n\n    this._orbitShape = new THREE.Line(\n      pointsGeometry,\n      new THREE.LineBasicMaterial({\n        color: new THREE.Color(this._options.color || 0x444444),\n      }),\n      THREE.LineStrip,\n    );\n    return this._orbitShape;\n  }\n\n  /**\n   * @return {THREE.Line} The ellipse object that represents this orbit.\n   */\n  getEllipse() {\n    if (this._orbitShape) {\n      return this._orbitShape;\n    }\n    const pointGeometry = this.getEllipsePoints();\n    this._orbitShape = new THREE.Line(\n      pointGeometry,\n      new THREE.LineBasicMaterial({\n        color: new THREE.Color(this._options.color || 0x444444),\n      }),\n      THREE.LineStrip,\n    );\n    return this._orbitShape;\n  }\n\n  /**\n   * @private\n   * @return {Array.<THREE.Vector3>} List of points\n   */\n  getEllipsePoints() {\n    if (this._ellipsePoints) {\n      return this._ellipsePoints;\n    }\n\n    const eph = this._ephem;\n\n    const period = eph.get('period');\n    const ecc = eph.get('e');\n    // const minSegments = ecc > 0.4 ? 100 : 50;\n    const minSegments = 360;\n    const numSegments = Math.max(period / 8, minSegments);\n    const step = period / numSegments;\n\n    const pts = [];\n    let prevPos;\n    for (let time = 0; time < period; time += step) {\n      const pos = this.getPositionAtTime(time);\n      if (isNaN(pos[0]) || isNaN(pos[1]) || isNaN(pos[2])) {\n        console.error(\n          'NaN position value - you may have bad or incomplete data in the following ephemeris:',\n        );\n        console.error(eph);\n      }\n      const vector = new THREE.Vector3(pos[0], pos[1], pos[2]);\n      if (\n        prevPos &&\n        Math.abs(prevPos[0] - pos[0]) +\n          Math.abs(prevPos[1] - pos[1]) +\n          Math.abs(prevPos[2] - pos[2]) >\n          120\n      ) {\n        // Don't render bogus or very large ellipses.\n        points.vertices = [];\n        return points;\n      }\n      prevPos = pos;\n      pts.push(vector);\n    }\n    pts.push(pts[0]);\n\n    this._ellipsePoints = new THREE.Geometry();\n    this._ellipsePoints.vertices = pts;\n\n    return this._ellipsePoints;\n  }\n\n  /**\n   * A geometry containing line segments that run between the orbit ellipse and\n   * the ecliptic plane of the solar system. This is a useful visual effect\n   * that makes it easy to tell when an orbit goes below or above the ecliptic\n   * plane.\n   * @return {THREE.Geometry} A geometry with many line segments.\n   */\n  getLinesToEcliptic() {\n    const points = this.getEllipsePoints();\n    const geometry = new THREE.Geometry();\n\n    points.vertices.forEach(vertex => {\n      geometry.vertices.push(vertex);\n      geometry.vertices.push(new THREE.Vector3(vertex.x, vertex.y, 0));\n    });\n\n    return new THREE.LineSegments(\n      geometry,\n      new THREE.LineBasicMaterial({\n        color: this._options.eclipticLineColor || 0x333333,\n      }),\n      THREE.LineStrip,\n    );\n  }\n\n  /**\n   * Get the color of this orbit.\n   * @return {Number} The hexadecimal color of the orbital ellipse.\n   */\n  getHexColor() {\n    return this._orbitShape.material.color.getHex();\n  }\n\n  /**\n   * @param {Number} hexVal The hexadecimal color of the orbital ellipse.\n   */\n  setHexColor(hexVal) {\n    this._orbitShape.material.color = new THREE.Color(hexVal);\n  }\n\n  /**\n   * Get the visibility of this orbit.\n   * @return {boolean} Whether the orbital ellipse is visible. Note that\n   * although the ellipse may not be visible, it is still present in the\n   * underlying Scene and Simultation.\n   */\n  getVisibility() {\n    return this._orbitShape.visible;\n  }\n\n  /**\n   * Change the visibility of this orbit.\n   * @param {boolean} val Whether to show the orbital ellipse.\n   */\n  setVisibility(val) {\n    this._orbitShape.visible = val;\n  }\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/Orbit.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "pi",
    "memberof": "src/Orbit.js",
    "static": true,
    "longname": "src/Orbit.js~pi",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Orbit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "sin",
    "memberof": "src/Orbit.js",
    "static": true,
    "longname": "src/Orbit.js~sin",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Orbit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "cos",
    "memberof": "src/Orbit.js",
    "static": true,
    "longname": "src/Orbit.js~cos",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Orbit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "sqrt",
    "memberof": "src/Orbit.js",
    "static": true,
    "longname": "src/Orbit.js~sqrt",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Orbit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "cbrt",
    "memberof": "src/Orbit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Orbit.js~cbrt",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Orbit.js",
    "importStyle": null,
    "description": "Special cube root function that assumes input is always positive.",
    "lineNumber": 14,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "OrbitType",
    "memberof": "src/Orbit.js",
    "static": true,
    "longname": "src/Orbit.js~OrbitType",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Orbit.js",
    "importStyle": "{OrbitType}",
    "description": "Enum of orbital types.",
    "lineNumber": 21,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "getOrbitType",
    "memberof": "src/Orbit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Orbit.js~getOrbitType",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Orbit.js",
    "importStyle": "{getOrbitType}",
    "description": "Get the type of orbit. Returns one of OrbitType.PARABOLIC, HYPERBOLIC,\nELLIPTICAL, or UNKNOWN.",
    "lineNumber": 33,
    "return": {
      "nullable": null,
      "types": [
        "OrbitType"
      ],
      "spread": false,
      "description": "Name of orbit type"
    },
    "params": [
      {
        "name": "ephem",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 148,
    "kind": "class",
    "name": "Orbit",
    "memberof": "src/Orbit.js",
    "static": true,
    "longname": "src/Orbit.js~Orbit",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Orbit.js",
    "importStyle": "{Orbit}",
    "description": "A class that builds a visual representation of a Kepler orbit.",
    "examples": [
      "const orbit = new Spacekit.Orbit({\n  ephem: new Spacekit.Ephem({...}),\n  options: {\n    color: 0xFFFFFF,\n    eclipticLineColor: 0xCCCCCC,\n  },\n});"
    ],
    "lineNumber": 56,
    "interface": false
  },
  {
    "__docId__": 149,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "Ephem"
        ],
        "spread": false,
        "optional": false,
        "name": "ephem",
        "description": "The ephemerides that define this orbit."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.color",
        "description": "The color of the orbital ellipse."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.eclipticLineColor",
        "description": "The color of lines drawn\nperpendicular to the ecliptic in order to illustrate depth (defaults to\n0x333333)."
      }
    ]
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "_ephem",
    "memberof": "src/Orbit.js~Orbit",
    "static": false,
    "longname": "src/Orbit.js~Orbit#_ephem",
    "access": "private",
    "description": "Ephem object",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "Ephem"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "_options",
    "memberof": "src/Orbit.js~Orbit",
    "static": false,
    "longname": "src/Orbit.js~Orbit#_options",
    "access": "private",
    "description": "Options (see class definition for details)",
    "lineNumber": 75,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "_ellipsePoints",
    "memberof": "src/Orbit.js~Orbit",
    "static": false,
    "longname": "src/Orbit.js~Orbit#_ellipsePoints",
    "access": "private",
    "description": "Cached orbital points.",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "Array.<THREE.Vector3>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "_orbitShape",
    "memberof": "src/Orbit.js~Orbit",
    "static": false,
    "longname": "src/Orbit.js~Orbit#_orbitShape",
    "access": "private",
    "description": "Cached ellipse.",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Line"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "getPositionAtTime",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getPositionAtTime",
    "access": "public",
    "description": "Get heliocentric position of object at a given JD.",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "jd",
        "description": "Date value in JD."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Set true for debug output."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Number>"
      ],
      "spread": false,
      "description": "[X, Y, Z] coordinates"
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "getPositionAtTimeParabolic",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getPositionAtTimeParabolic",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "jd",
        "types": [
          "*"
        ]
      },
      {
        "name": "debug",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "getPositionAtTimeNearParabolic",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getPositionAtTimeNearParabolic",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "jd",
        "types": [
          "*"
        ]
      },
      {
        "name": "debug",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "getPositionAtTimeHyperbolic",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getPositionAtTimeHyperbolic",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "jd",
        "types": [
          "*"
        ]
      },
      {
        "name": "debug",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "getPositionAtTimeElliptical",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getPositionAtTimeElliptical",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "jd",
        "types": [
          "*"
        ]
      },
      {
        "name": "debug",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "vectorToHeliocentric",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#vectorToHeliocentric",
    "access": "public",
    "description": "Given true anomaly and heliocentric distance, returns the scaled heliocentric coordinates (X, Y, Z)",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "True anomaly"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Heliocentric distance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Number>"
      ],
      "spread": false,
      "description": "Heliocentric coordinates"
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "getOrbitShape",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getOrbitShape",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "getLine",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getLine",
    "access": "public",
    "description": "Compute a line between a given date range.",
    "lineNumber": 330,
    "params": [
      {
        "name": "orbitFn",
        "types": [
          "*"
        ]
      },
      {
        "name": "startJd",
        "types": [
          "*"
        ]
      },
      {
        "name": "endJd",
        "types": [
          "*"
        ]
      },
      {
        "name": "step",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "getEllipse",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getEllipse",
    "access": "public",
    "description": "",
    "lineNumber": 359,
    "return": {
      "nullable": null,
      "types": [
        "THREE.Line"
      ],
      "spread": false,
      "description": "The ellipse object that represents this orbit."
    },
    "params": []
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "getEllipsePoints",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getEllipsePoints",
    "access": "private",
    "description": "",
    "lineNumber": 378,
    "return": {
      "nullable": null,
      "types": [
        "Array.<THREE.Vector3>"
      ],
      "spread": false,
      "description": "List of points"
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "getLinesToEcliptic",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getLinesToEcliptic",
    "access": "public",
    "description": "A geometry containing line segments that run between the orbit ellipse and\nthe ecliptic plane of the solar system. This is a useful visual effect\nthat makes it easy to tell when an orbit goes below or above the ecliptic\nplane.",
    "lineNumber": 432,
    "return": {
      "nullable": null,
      "types": [
        "THREE.Geometry"
      ],
      "spread": false,
      "description": "A geometry with many line segments."
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "getHexColor",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getHexColor",
    "access": "public",
    "description": "Get the color of this orbit.",
    "lineNumber": 454,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The hexadecimal color of the orbital ellipse."
    },
    "params": []
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "setHexColor",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#setHexColor",
    "access": "public",
    "description": "",
    "lineNumber": 461,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "hexVal",
        "description": "The hexadecimal color of the orbital ellipse."
      }
    ],
    "return": null
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "getVisibility",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#getVisibility",
    "access": "public",
    "description": "Get the visibility of this orbit.",
    "lineNumber": 471,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the orbital ellipse is visible. Note that\nalthough the ellipse may not be visible, it is still present in the\nunderlying Scene and Simultation."
    },
    "params": []
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "setVisibility",
    "memberof": "src/Orbit.js~Orbit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Orbit.js~Orbit#setVisibility",
    "access": "public",
    "description": "Change the visibility of this orbit.",
    "lineNumber": 479,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "Whether to show the orbital ellipse."
      }
    ],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/RotatingObject.js",
    "content": "import * as THREE from 'three';\n\nimport { SpaceObject } from './SpaceObject';\nimport { rad } from './Units';\nimport { rescaleVector } from './Scale';\n\nfunction getAxis(src, dst, color) {\n  const geom = new THREE.Geometry();\n  const mat = new THREE.LineBasicMaterial({ linewidth: 3, color });\n\n  geom.vertices.push(rescaleVector(src).clone());\n  geom.vertices.push(rescaleVector(dst).clone());\n\n  const axis = new THREE.Line(geom, mat, THREE.LineSegments);\n  axis.computeLineDistances();\n  return axis;\n}\n\nfunction getAxes() {\n  return [\n    getAxis(new THREE.Vector3(0, 0, 0), new THREE.Vector3(3, 0, 0), 0xff0000),\n    getAxis(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 3, 0), 0x00ff00),\n    getAxis(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 3), 0x0000ff),\n  ];\n}\n\n/**\n * This class simulates an object that spins according to provided rotational\n * parameters.\n */\nexport class RotatingObject extends SpaceObject {\n  /*\n   * FIXME(ian): This implementation is still WIP! Rotational parameters are not\n   * used right now.\n   * @param {boolean} options.rotation.enable Rotate the object\n   * @param {Number} options.rotation.speed Factor that determines speed of rotation\n   * @param {Number} options.rotation.lambdaDeg Ecliptic longitude lambda, in degrees\n   * @param {Number} options.rotation.betaDeg Ecliptic longitude beta, in degrees\n   * @param {Number} options.rotation.period Rotational period, in JD\n   * @param {Number} options.rotation.yorp YORP coefficient, if any (defaults to 0)\n   * @param {Number} options.rotation.phi0 Initial rotation phi, in degrees (defaults to 0)\n   * @param {Number} options.rotation.jd0 JD epoch of rotational parameters\n   * @see SpaceObject\n   */\n  constructor(id, options, contextOrSimulation, autoInit = true) {\n    super(id, options, contextOrSimulation, false /* autoInit */);\n\n    // The THREE.js object\n    this._obj = new THREE.Object3D();\n    this._renderMethod = 'ROTATING_OBJECT';\n    super.setPositionedObject(this._obj);\n\n    this._objectIsRotatable = false;\n    if (this._options.rotation) {\n      this._objectIsRotatable = true;\n    }\n\n    // Offset of axis angle\n    this._axisRotationAngleOffset = 0;\n    this._axisOfRotation = undefined;\n\n    // Keep track of materials that comprise this object.\n    this._materials = [];\n\n    if (autoInit) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this._objectIsRotatable) {\n      this.initRotation();\n    }\n\n    if (this._options.debug) {\n      if (this._options.debug.showAxes) {\n        getAxes().forEach(axis => this._obj.add(axis));\n      }\n\n      if (this._options.debug.showGrid) {\n        const gridHelper = new THREE.GridHelper(3, 3, 0xff0000, 0xffeeee);\n        gridHelper.geometry.rotateX(Math.PI / 2);\n        this._obj.add(gridHelper);\n      }\n    }\n\n    super.init();\n  }\n\n  initRotation() {\n    if (typeof this._options.rotation.jd0 === 'undefined') {\n      return;\n    }\n\n    // Formula\n    // https://astro.troja.mff.cuni.cz/projects/asteroids3D/web.php?page=db_description\n\n    // Testing this asteroid:\n    // http://astro.troja.mff.cuni.cz/projects/asteroids3D/web.php?page=db_asteroid_detail&asteroid_id=1504\n    // Model 2691\n    const PI = Math.PI;\n\n    // Cacus\n    // http://astro.troja.mff.cuni.cz/projects/asteroids3D/web.php?page=db_asteroid_detail&asteroid_id=1046\n    // http://astro.troja.mff.cuni.cz/projects/asteroids3D/php.php?script=db_sky_projection&model_id=1863&jd=2443568.0\n\n    const rotation = this._options.rotation;\n\n    // Latitude\n    const lambda = rad(rotation.lambdaDeg);\n\n    // Longitude\n    const beta = rad(rotation.betaDeg);\n\n    // Other\n    const P = rotation.period;\n    const YORP = rotation.yorp;\n    const phi0 = rad(rotation.phi0);\n    const JD = this._simulation.getJd();\n    const JD0 = rotation.jd0;\n\n    // Asteroid rotation\n    // this._obj.rotateOnWorldAxis(new THREE.Vector3(0, 0, 1), lambda);\n    // this._obj.rotateOnWorldAxis(new THREE.Vector3(0, 1, 0), beta);\n\n    // Adjust Z axis according to time.\n    const zAdjust =\n      phi0 +\n      ((2 * PI) / P) * (JD - JD0) +\n      (1 / 2) * YORP * Math.pow(JD - JD0, 2);\n    this._obj.rotateY(-(PI / 2 - beta));\n    this._obj.rotateZ(-lambda);\n    this._obj.rotateZ(zAdjust);\n  }\n\n  /**\n   * Updates the object and its label positions for a given time.\n   * @param {Number} jd JD date\n   */\n  update(jd) {\n    if (\n      this._obj &&\n      this._objectIsRotatable &&\n      this._options.rotation &&\n      this._options.rotation.enable\n    ) {\n      // For now, just rotate on X axis.\n      const speed = this._options.rotation.speed || 0.5;\n      this._obj.rotation.z += speed * (Math.PI / 180);\n      this._obj.rotation.z %= 360;\n    }\n    if (this._axisOfRotation) {\n      // this._obj.rotateOnAxis(this._axisOfRotation, 0.01);\n    }\n    // this._obj.rotateZ(0.015)\n    // this._obj.rotateOnWorldAxis(new THREE.Vector3(0, 0, 1), 0.01);\n\n    // Update position\n    super.update(jd);\n  }\n\n  /**\n   * Gets the THREE.js objects that represent this SpaceObject.\n   * @return {Array.<THREE.Object>} A list of THREE.js objects\n   */\n  get3jsObjects() {\n    const ret = super.get3jsObjects();\n    // Add to the front, because this is the primary object.\n    ret.unshift(this._obj);\n    return ret;\n  }\n\n  /**\n   * Begin rotating this object.\n   */\n  startRotation() {\n    this._options.rotation.enable = true;\n  }\n\n  /**\n   * Stop rotation of this object.\n   */\n  stopRotation() {\n    this._options.rotation.enable = false;\n  }\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/RotatingObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "getAxis",
    "memberof": "src/RotatingObject.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/RotatingObject.js~getAxis",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/RotatingObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "src",
        "types": [
          "*"
        ]
      },
      {
        "name": "dst",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "getAxes",
    "memberof": "src/RotatingObject.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/RotatingObject.js~getAxes",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/RotatingObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "class",
    "name": "RotatingObject",
    "memberof": "src/RotatingObject.js",
    "static": true,
    "longname": "src/RotatingObject.js~RotatingObject",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/RotatingObject.js",
    "importStyle": "{RotatingObject}",
    "description": "This class simulates an object that spins according to provided rotational\nparameters.",
    "lineNumber": 31,
    "interface": false,
    "extends": [
      "src/SpaceObject.js~SpaceObject"
    ]
  },
  {
    "__docId__": 176,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "_obj",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#_obj",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "_renderMethod",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#_renderMethod",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "_objectIsRotatable",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#_objectIsRotatable",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "_axisRotationAngleOffset",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#_axisRotationAngleOffset",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "_axisOfRotation",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#_axisOfRotation",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "_materials",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#_materials",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "init",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#init",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "initRotation",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#initRotation",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "update",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#update",
    "access": "public",
    "description": "Updates the object and its label positions for a given time.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "jd",
        "description": "JD date"
      }
    ],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "get3jsObjects",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#get3jsObjects",
    "access": "public",
    "description": "Gets the THREE.js objects that represent this SpaceObject.",
    "lineNumber": 166,
    "return": {
      "nullable": null,
      "types": [
        "Array.<THREE.Object>"
      ],
      "spread": false,
      "description": "A list of THREE.js objects"
    },
    "params": []
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "startRotation",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#startRotation",
    "access": "public",
    "description": "Begin rotating this object.",
    "lineNumber": 176,
    "params": [],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "stopRotation",
    "memberof": "src/RotatingObject.js~RotatingObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/RotatingObject.js~RotatingObject#stopRotation",
    "access": "public",
    "description": "Stop rotation of this object.",
    "lineNumber": 183,
    "params": [],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/Scale.js",
    "content": "let scaleFactor = 1.0;\n\n/**\n * Set the number of units per AU.\n */\nexport function setScaleFactor(val) {\n  scaleFactor = val;\n}\n\n/**\n * Get the number of units per AU.\n */\nexport function getScaleFactor() {\n  return scaleFactor;\n}\n\nexport function rescalePos(pos) {\n  pos.x *= scaleFactor;\n  pos.y *= scaleFactor;\n  pos.z *= scaleFactor;\n  return pos;\n}\n\nexport function rescaleArray(XYZ) {\n  return [XYZ[0] * scaleFactor, XYZ[1] * scaleFactor, XYZ[2] * scaleFactor];\n}\n\nexport function rescaleXYZ(X, Y, Z) {\n  return [X * scaleFactor, Y * scaleFactor, Z * scaleFactor];\n}\n\nexport function rescaleVector(vec) {\n  return vec.multiplyScalar(scaleFactor);\n}\n\nexport function rescaleNumber(x) {\n  return scaleFactor * x;\n}\n\nexport function rescale(...args) {\n  if (Array.isArray(args[0])) {\n    return rescaleArray(args[0]);\n  }\n  if (typeof args[0] === 'number') {\n    if (args.length === 3) {\n      return rescaleXYZ(...args);\n    }\n    return rescaleNumber(args[0]);\n  }\n  return rescalePos(args[0]);\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/Scale.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "scaleFactor",
    "memberof": "src/Scale.js",
    "static": true,
    "longname": "src/Scale.js~scaleFactor",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Scale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "setScaleFactor",
    "memberof": "src/Scale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Scale.js~setScaleFactor",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Scale.js",
    "importStyle": "{setScaleFactor}",
    "description": "Set the number of units per AU.",
    "lineNumber": 6,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "getScaleFactor",
    "memberof": "src/Scale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Scale.js~getScaleFactor",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Scale.js",
    "importStyle": "{getScaleFactor}",
    "description": "Get the number of units per AU.",
    "lineNumber": 13,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "rescalePos",
    "memberof": "src/Scale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Scale.js~rescalePos",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Scale.js",
    "importStyle": "{rescalePos}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "pos",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "rescaleArray",
    "memberof": "src/Scale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Scale.js~rescaleArray",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Scale.js",
    "importStyle": "{rescaleArray}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "XYZ",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "rescaleXYZ",
    "memberof": "src/Scale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Scale.js~rescaleXYZ",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Scale.js",
    "importStyle": "{rescaleXYZ}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "X",
        "types": [
          "*"
        ]
      },
      {
        "name": "Y",
        "types": [
          "*"
        ]
      },
      {
        "name": "Z",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "rescaleVector",
    "memberof": "src/Scale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Scale.js~rescaleVector",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Scale.js",
    "importStyle": "{rescaleVector}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "vec",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "rescaleNumber",
    "memberof": "src/Scale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Scale.js~rescaleNumber",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Scale.js",
    "importStyle": "{rescaleNumber}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "rescale",
    "memberof": "src/Scale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Scale.js~rescale",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Scale.js",
    "importStyle": "{rescale}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "src/ShapeObject.js",
    "content": "import * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\n\nimport { RotatingObject } from './RotatingObject';\n\nexport class ShapeObject extends RotatingObject {\n  /**\n   * @param {Object} options.shape Shape specification\n   * @param {String} options.shape.type Type of object (\"custom\" or \"sphere\")\n   * @param {String} options.shape.shapeUrl Path to shapefile if type is \"custom\"\n   * @param {Number} options.shape.textureUrl Optional texture map for shape\n   * @param {Number} options.shape.color Color of shape materials. Default 0xcccccc\n   * @param {Number} options.shape.radius Radius, if applicable. Defaults to 1\n   * @param {Object} options.shape.debug Debug options\n   * @param {boolean} options.shape.debug.showAxes Show axes\n   * rotation speed. Default 0.5\n   * @see SpaceObject\n   * @see RotatingObject\n   */\n  constructor(id, options, contextOrSimulation) {\n    super(id, options, contextOrSimulation, false /* autoInit */);\n    if (!options.shape) {\n      console.error('ShapeObject requires an options.shape object');\n      return;\n    }\n\n    this._shapeObj = undefined;\n\n    this.init();\n  }\n\n  /**\n   * @private\n   */\n  init() {\n    const manager = new THREE.LoadingManager();\n    manager.onProgress = (item, loaded, total) => {\n      console.info(this._id, item, 'loading progress:', loaded, '/', total);\n    };\n    const loader = new OBJLoader(manager);\n    // TODO(ian): Make shapeurl follow assetpath logic.\n    loader.load(this._options.shape.shapeUrl, object => {\n      object.traverse(child => {\n        if (child instanceof THREE.Mesh) {\n          const material = new THREE.MeshStandardMaterial({\n            color: this._options.shape.color || 0xcccccc,\n          });\n          child.material = material;\n          child.geometry.scale(0.05, 0.05, 0.05);\n          /*\n          child.geometry.computeFaceNormals();\n          child.geometry.computeVertexNormals();\n          child.geometry.computeBoundingBox();\n         */\n          this._materials.push(material);\n        }\n      });\n\n      this._shapeObj = object;\n      this._obj.add(object);\n\n      // Move the object to its position.\n      const pos =\n        this._options.position || this.getPosition(this._simulation.getJd());\n      if (pos) {\n        this._obj.position.set(pos[0], pos[1], pos[2]);\n      }\n\n      if (this._simulation) {\n        // Add it all to visualization.\n        this._simulation.addObject(this, false /* noUpdate */);\n      }\n\n      this._initialized = true;\n    });\n\n    // TODO(ian): Create an orbit if applicable\n    super.init();\n  }\n\n  /**\n   * Specifies the object that is used to compute the bounding box.\n   * @return {THREE.Object3D} THREE.js object\n   */\n  getBoundingObject() {\n    return this._shapeObj;\n  }\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/ShapeObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "class",
    "name": "ShapeObject",
    "memberof": "src/ShapeObject.js",
    "static": true,
    "longname": "src/ShapeObject.js~ShapeObject",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/ShapeObject.js",
    "importStyle": "{ShapeObject}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/RotatingObject.js~RotatingObject"
    ]
  },
  {
    "__docId__": 202,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ShapeObject.js~ShapeObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ShapeObject.js~ShapeObject#constructor",
    "access": "public",
    "description": "",
    "see": [
      "SpaceObject",
      "RotatingObject"
    ],
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.shape",
        "description": "Shape specification"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.shape.type",
        "description": "Type of object (\"custom\" or \"sphere\")"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.shape.shapeUrl",
        "description": "Path to shapefile if type is \"custom\""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.shape.textureUrl",
        "description": "Optional texture map for shape"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.shape.color",
        "description": "Color of shape materials. Default 0xcccccc"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.shape.radius",
        "description": "Radius, if applicable. Defaults to 1"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.shape.debug",
        "description": "Debug options"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.shape.debug.showAxes",
        "description": "Show axes\nrotation speed. Default 0.5"
      }
    ]
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "_shapeObj",
    "memberof": "src/ShapeObject.js~ShapeObject",
    "static": false,
    "longname": "src/ShapeObject.js~ShapeObject#_shapeObj",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "init",
    "memberof": "src/ShapeObject.js~ShapeObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ShapeObject.js~ShapeObject#init",
    "access": "private",
    "description": "",
    "lineNumber": 35,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "_initialized",
    "memberof": "src/ShapeObject.js~ShapeObject",
    "static": false,
    "longname": "src/ShapeObject.js~ShapeObject#_initialized",
    "access": "private",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "getBoundingObject",
    "memberof": "src/ShapeObject.js~ShapeObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ShapeObject.js~ShapeObject#getBoundingObject",
    "access": "public",
    "description": "Specifies the object that is used to compute the bounding box.",
    "lineNumber": 85,
    "return": {
      "nullable": null,
      "types": [
        "THREE.Object3D"
      ],
      "spread": false,
      "description": "THREE.js object"
    },
    "params": []
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "src/Simulation.js",
    "content": "import * as THREE from 'three';\nimport julian from 'julian';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\nimport {\n  EffectComposer,\n  BlendFunction,\n  EffectPass,\n  GodRaysEffect,\n  BloomEffect,\n  KernelSize,\n  SMAAEffect,\n  RenderPass,\n} from 'postprocessing';\n\nimport { Camera } from './Camera';\nimport { KeplerParticles } from './KeplerParticles';\nimport { NaturalSatellites } from './EphemPresets';\nimport { ShapeObject } from './ShapeObject';\nimport { Skybox } from './Skybox';\nimport { SpaceObject } from './SpaceObject';\nimport { SphereObject } from './SphereObject';\nimport { StaticParticles } from './StaticParticles';\nimport { Stars } from './Stars';\nimport { getDefaultBasePath } from './util';\nimport { setScaleFactor, rescaleArray, rescaleNumber } from './Scale';\n\n/**\n * The main entrypoint of a visualization.\n *\n * This class wraps a THREE.js scene, controls, skybox, etc in an animated\n * Simulation.\n *\n * @example\n * const sim = new Spacekit.Simulation(document.getElementById('my-container'), {\n *  basePath: '../path/to/assets',\n *  startDate: Date.now(),\n *  jd: 0.0,\n *  jdDelta: 10.0,\n *  jdPerSecond: 100.0,  // overrides jdDelta\n *  startPaused: false,\n *  unitsPerAu: 1.0,\n *  maxNumParticles: 2**16,\n *  camera: {\n *    initialPosition: [0, -10, 5],\n *    enableDrift: false,\n *  },\n *  debug: {\n *    showAxes: false,\n *    showGrid: false,\n *    showStats: false,\n *  },\n * });\n */\nexport class Simulation {\n  /**\n   * @param {HTMLElement} simulationElt The container for this simulation.\n   * @param {Object} options for simulation\n   * @param {String} options.basePath Path to simulation assets and data\n   * @param {Date} options.startDate The start date and time for this\n   * simulation.\n   * @param {Number} options.jd The JD date of this simulation.\n   * Defaults to 0\n   * @param {Number} options.jdDelta The number of JD to add every tick of\n   * the simulation.\n   * @param {Number} options.jdPerSecond The number of jd to add every second.\n   * Use this instead of `jdDelta` for constant motion that does not vary with\n   * framerate.  Defaults to 100.\n   * @param {Number} options.unitsPerAu The number of \"position\" units in the\n   * simulation that represent an AU. This is an optional setting that you may\n   * use if the default (1 unit = 1 AU) is too small for your simulation (e.g.\n   * if you are representing a planetary system). Depending on your graphics\n   * card, you may begin to notice inaccuracies at fractional scales of GL\n   * units, so it becomes necessary to scale the whole visualization.  Defaults\n   * to 1.0.\n   * @param {boolean} options.startPaused Whether the simulation should start\n   * in a paused state.\n   * @param {Number} options.maxNumParticles The maximum number of particles in\n   * the visualization. Try choosing a number that is larger than your\n   * particles, but not too much larger. It's usually good enough to choose the\n   * next highest power of 2. If you're not showing many particles (tens of\n   * thousands+), you don't need to worry about this.\n   * @param {String} options.particleTextureUrl The texture for the default\n   * particle system.\n   * @param {Number} options.particleDefaultSize The default size for the\n   * particle system.\n   * @param {Object} options.camera Options for camera\n   * @param {Array.<Number>} options.camera.initialPosition Initial X, Y, Z\n   * coordinates of the camera. Defaults to [0, -10, 5].\n   * @param {boolean} options.camera.enableDrift Set true to have the camera\n   * float around slightly. False by default.\n   * @param {Object} options.debug Options dictating debug state.\n   * @param {boolean} options.debug.showAxes Show X, Y, and Z axes\n   * @param {boolean} options.debug.showGrid Show grid on XY plane\n   * @param {boolean} options.debug.showStats Show FPS and other stats\n   * (requires stats.js).\n   */\n  constructor(simulationElt, options) {\n    this._simulationElt = simulationElt;\n    this._options = options || {};\n    this._options.basePath = this._options.basePath || getDefaultBasePath();\n\n    this._jd =\n      typeof this._options.jd === 'undefined'\n        ? Number(julian(this._options.startDate)) || 0\n        : this._options.jd;\n    this._jdDelta = this._options.jdDelta;\n    this._jdPerSecond = this._options.jdPerSecond || 100;\n    this._isPaused = options.startPaused || false;\n    this.onTick = null;\n\n    this._enableCameraDrift = false;\n    this._cameraDefaultPos = rescaleArray([0, -10, 5]);\n    if (this._options.camera) {\n      this._enableCameraDrift = !!this._options.camera.enableDrift;\n      if (this._options.camera.initialPosition) {\n        this._cameraDefaultPos = rescaleArray(\n          this._options.camera.initialPosition,\n        );\n      }\n    }\n\n    this._camera = null;\n    this._isUsingLightSources = false;\n    this._lightPosition = null;\n\n    this._subscribedObjects = {};\n    this._particles = null;\n\n    // stats.js panel\n    this._stats = null;\n    this._fps = 1;\n    this._lastUpdatedTime = Date.now();\n\n    // Rendering\n    this._renderEnabled = true;\n    this.animate = this.animate.bind(this);\n\n    this._scene = null;\n    this._renderer = null;\n    this._composer = null;\n\n    this.init();\n    this.animate();\n  }\n\n  /**\n   * @private\n   */\n  init() {\n    this.initRenderer();\n\n    // Misc\n    // This makes controls.lookAt and other objects treat the positive Z axis\n    // as \"up\" direction.\n    THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1);\n\n    // Scale\n    if (this._options.unitsPerAu) {\n      setScaleFactor(this._options.unitsPerAu);\n    }\n\n    // Scene\n    const scene = new THREE.Scene();\n    this._scene = scene;\n\n    // Camera\n    const camera = new Camera(this.getContext());\n    camera\n      .get3jsCamera()\n      .position.set(\n        this._cameraDefaultPos[0],\n        this._cameraDefaultPos[1],\n        this._cameraDefaultPos[2],\n      );\n    window.cam = camera.get3jsCamera();\n    this._camera = camera;\n\n    // Events\n    this._simulationElt.onmousedown = this._simulationElt.ontouchstart = () => {\n      // When user begins interacting with the visualization, disable camera\n      // drift.\n      this._enableCameraDrift = false;\n    };\n\n    // Helper\n    if (this._options.debug) {\n      if (this._options.debug.showGrid) {\n        const gridHelper = new THREE.GridHelper();\n        gridHelper.geometry.rotateX(Math.PI / 2);\n        this._scene.add(gridHelper);\n      }\n      if (this._options.debug.showAxes) {\n        this._scene.add(new THREE.AxesHelper(0.5));\n      }\n      if (this._options.debug.showStats) {\n        this._stats = new Stats();\n        this._stats.showPanel(0);\n        this._simulationElt.appendChild(this._stats.dom);\n      }\n    }\n\n    // Orbit particle system must be initialized after scene is created.\n    this._particles = new KeplerParticles(\n      {\n        textureUrl:\n          this._options.particleTextureUrl ||\n          '{{assets}}/sprites/smallparticle.png',\n        jd: this._jd,\n        maxNumParticles: this._options.maxNumParticles,\n        defaultSize: this._options.particleDefaultSize,\n      },\n      this,\n    );\n\n    // Set up effect composer, etc.\n    this.initPasses();\n  }\n\n  /**\n   * @private\n   */\n  initRenderer() {\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      //logarithmicDepthBuffer: true,\n    });\n    renderer.gammaInput = true;\n    renderer.gammaOutput = true;\n    console.info(\n      'Max texture resolution:',\n      renderer.capabilities.maxTextureSize,\n    );\n\n    const maxPrecision = renderer.capabilities.getMaxPrecision();\n    if (maxPrecision !== 'highp') {\n      console.warn(\n        `Shader maximum precision is \"${maxPrecision}\", GPU rendering may not be accurate.`,\n      );\n    }\n\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(\n      this._simulationElt.offsetWidth,\n      this._simulationElt.offsetHeight,\n    );\n\n    this._simulationElt.appendChild(renderer.domElement);\n\n    this._renderer = renderer;\n  }\n\n  /**\n   * @private\n   */\n  initPasses() {\n    //const smaaEffect = new SMAAEffect(assets.get(\"smaa-search\"), assets.get(\"smaa-area\"));\n    //smaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(0.065);\n\n    const camera = this._camera.get3jsCamera();\n\n    /*\n    const sunGeometry = new THREE.SphereBufferGeometry(\n      rescaleNumber(0.004),\n      16,\n      16,\n    );\n    const sunMaterial = new THREE.MeshBasicMaterial({\n      color: 0xffddaa,\n      transparent: true,\n      depthWrite: false,\n      fog: false,\n    });\n    const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n    const rescaled = rescaleArray([0.1, 0.1, 0.0]);\n    sun.position.set(rescaled[0], rescaled[1], rescaled[2]);\n    sun.updateMatrix();\n    sun.updateMatrixWorld();\n\n    const godRaysEffect = new GodRaysEffect(camera, sun, {\n      color: 0xfff5f2,\n      blur: false,\n    });\n    */\n    //godRaysEffect.dithering = true;\n\n    const bloomEffect = new BloomEffect(this._scene, camera, {\n      width: 240,\n      height: 240,\n      luminanceThreshold: 0.2,\n    });\n    bloomEffect.inverted = true;\n    bloomEffect.blendMode.opacity.value = 2.3;\n\n    const renderPass = new RenderPass(this._scene, camera);\n    renderPass.renderToScreen = false;\n\n    const effectPass = new EffectPass(\n      camera,\n      /*smaaEffect, godRaysEffect*/ bloomEffect,\n    );\n    effectPass.renderToScreen = true;\n\n    const composer = new EffectComposer(this._renderer);\n    composer.addPass(renderPass);\n    composer.addPass(effectPass);\n    this._composer = composer;\n  }\n\n  /**\n   * @private\n   */\n  update() {\n    for (const objId in this._subscribedObjects) {\n      if (this._subscribedObjects.hasOwnProperty(objId)) {\n        this._subscribedObjects[objId].update(this._jd);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * TODO(ian): Move this into Camera\n   */\n  doCameraDrift() {\n    // Follow floating path around\n    const timer = 0.0001 * Date.now();\n    const pos = this._cameraDefaultPos;\n    const cam = this._camera.get3jsCamera();\n    cam.position.x = pos[0] + (pos[0] * (Math.cos(timer) + 1)) / 3;\n    cam.position.z = pos[2] + (pos[2] * (Math.sin(timer) + 1)) / 3;\n  }\n\n  /**\n   * @private\n   */\n  animate() {\n    if (!this._renderEnabled) {\n      return;\n    }\n\n    window.requestAnimationFrame(this.animate);\n\n    if (this._stats) {\n      this._stats.begin();\n    }\n\n    if (!this._isPaused) {\n      if (this._jdDelta) {\n        this._jd += this._jdDelta;\n      } else {\n        // N jd per second\n        this._jd += this._jdPerSecond / this._fps;\n      }\n\n      const timeDelta = (Date.now() - this._lastUpdatedTime) / 1000;\n      this._lastUpdatedTime = Date.now();\n      this._fps = 1 / timeDelta || 1;\n\n      // Update objects in this simulation\n      this.update();\n    }\n\n    // Update camera drifting, if applicable\n    if (this._enableCameraDrift) {\n      this.doCameraDrift();\n    }\n    this._camera.update();\n\n    // Update three.js scene\n    this._renderer.render(this._scene, this._camera.get3jsCamera());\n    //this._composer.render(0.1);\n\n    if (this.onTick) {\n      this.onTick();\n    }\n\n    if (this._stats) {\n      this._stats.end();\n    }\n  }\n\n  /**\n   * Add a spacekit object (usually a SpaceObject) to the visualization.\n   * @see SpaceObject\n   * @param {Object} obj Object to add to visualization\n   * @param {boolean} noUpdate Set to true if object does not need to be\n   * animated.\n   */\n  addObject(obj, noUpdate = false) {\n    obj.get3jsObjects().map(x => {\n      this._scene.add(x);\n    });\n\n    if (!noUpdate) {\n      // Call for updates as time passes.\n      this._subscribedObjects[obj.getId()] = obj;\n    }\n  }\n\n  /**\n   * Removes an object from the visualization.\n   * @param {Object} obj Object to remove\n   */\n  removeObject(obj) {\n    // TODO(ian): test this and avoid memory leaks...\n    obj.get3jsObjects().map(x => {\n      this._scene.remove(x);\n    });\n\n    delete this._subscribedObjects[obj.getId()];\n  }\n\n  /**\n   * Shortcut for creating a new SpaceObject belonging to this visualization.\n   * Takes any SpaceObject arguments.\n   * @see SpaceObject\n   */\n  createObject(...args) {\n    return new SpaceObject(...args, this);\n  }\n\n  /**\n   * Shortcut for creating a new ShapeObject belonging to this visualization.\n   * Takes any ShapeObject arguments.\n   * @see ShapeObject\n   */\n  createShape(...args) {\n    return new ShapeObject(...args, this);\n  }\n\n  /**\n   * Shortcut for creating a new SphereOjbect belonging to this visualization.\n   * Takes any SphereObject arguments.\n   * @see SphereObject\n   */\n  createSphere(...args) {\n    return new SphereObject(...args, this);\n  }\n\n  /**\n   * Shortcut for creating a new StaticParticles object belonging to this visualization.\n   * Takes any StaticParticles arguments.\n   * @see SphereObject\n   */\n  createStaticParticles(...args) {\n    return new StaticParticles(...args, this);\n  }\n\n  /**\n   * Shortcut for creating a new Skybox belonging to this visualization. Takes\n   * any Skybox arguments.\n   * @see Skybox\n   */\n  createSkybox(...args) {\n    return new Skybox(...args, this);\n  }\n\n  /**\n   * Shortcut for creating a new Stars object belonging to this visualization.\n   * Takes any Stars arguments.\n   * @see Stars\n   */\n  createStars(...args) {\n    if (args.length) {\n      return new Stars(...args, this);\n    }\n    // No arguments supplied\n    return new Stars({}, this);\n  }\n\n  /**\n   * Creates an ambient light source. This will dimly light everything in the\n   * visualization.\n   * @param {Number} color Color of light, default 0x333333\n   */\n  createAmbientLight(color = 0x333333) {\n    this._scene.add(new THREE.AmbientLight(color));\n    this._isUsingLightSources = true;\n  }\n\n  /**\n   * Creates a light source. This will make the shape of your objects visible\n   * and provide some contrast.\n   * @param {Array.<Number>} pos Position of light source. Defaults to moving\n   * with camera.\n   * @param {Number} color Color of light, default 0xFFFFFF\n   */\n  createLight(pos = undefined, color = 0xffffff) {\n    if (this._lightPosition) {\n      console.warn(\n        \"Spacekit doesn't support more than one light source for SphereObjects\",\n      );\n    }\n    this._lightPosition = new THREE.Vector3();\n\n    // Pointlight is for standard meshes created by ShapeObjects.\n    // TODO(ian): Remove this point light.\n    const pointLight = new THREE.PointLight();\n\n    if (typeof pos !== 'undefined') {\n      const rescaled = rescaleArray(pos);\n      this._lightPosition.set(rescaled[0], rescaled[1], rescaled[2]);\n      pointLight.position.set(rescaled[0], rescaled[1], rescaled[2]);\n    } else {\n      // The light comes from the camera.\n      // FIXME(ian): This only affects the point source.\n      this._camera.get3jsCameraControls().addEventListener('change', () => {\n        this._lightPosition.copy(this._camera.get3jsCamera().position);\n        pointLight.position.copy(this._camera.get3jsCamera().position);\n      });\n    }\n\n    this._scene.add(pointLight);\n    this._isUsingLightSources = true;\n  }\n\n  getLightPosition() {\n    return this._lightPosition;\n  }\n\n  isUsingLightSources() {\n    return this._isUsingLightSources;\n  }\n\n  /**\n   * Returns a promise that receives a NaturalSatellites object when it is\n   * resolved.  @return {Promise<NaturalSatellites>} NaturalSatellites object\n   * that is ready to load.\n   *\n   * @see {NaturalSatellites}\n   */\n  loadNaturalSatellites() {\n    return new NaturalSatellites(this).load();\n  }\n\n  /**\n   * Installs a scroll handler that only renders the visualization while it is\n   * in the user's viewport.\n   *\n   * The scroll handler currently binds to the window object only.\n   */\n  renderOnlyInViewport() {\n    let previouslyInView = true;\n    const isInView = () => {\n      const rect = this._simulationElt.getBoundingClientRect();\n      const windowHeight =\n        window.innerHeight || document.documentElement.clientHeight;\n      const windowWidth =\n        window.innerWidth || document.documentElement.clientWidth;\n      const vertInView =\n        rect.top <= windowHeight && rect.top + rect.height >= 0;\n      const horInView = rect.left <= windowWidth && rect.left + rect.width >= 0;\n\n      return vertInView && horInView;\n    };\n\n    window.addEventListener('scroll', () => {\n      const inView = isInView();\n      if (previouslyInView && !inView) {\n        // Went out of view\n        this._renderEnabled = false;\n        previouslyInView = false;\n      } else if (!previouslyInView && inView) {\n        // Came into view\n        this._renderEnabled = true;\n        window.requestAnimationFrame(this.animate);\n        previouslyInView = true;\n      }\n    });\n\n    if (!isInView()) {\n      // Initial state is render enabled, so disable it if currently out of\n      // view.\n      this._renderEnabled = false;\n      previouslyInView = false;\n    }\n  }\n\n  /**\n   * Adjust camera position so that the object fits within the viewport. If\n   * applicable, this function will fit around the object's orbit.\n   * @param {SpaceObject} spaceObj Object to fit within viewport.\n   * @param {Number} offset Add some extra room in the viewport. Increase to be\n   * further zoomed out, decrease to be closer. Default 3.0.\n   */\n  zoomToFit(spaceObj, offset = 3.0) {\n    const checkZoomFit = () => {\n      const orbit = spaceObj.getOrbit();\n      const obj = orbit ? orbit.getOrbitShape() : spaceObj.getBoundingObject();\n      if (obj) {\n        this.doZoomToFit(obj, offset);\n        return true;\n      }\n      return false;\n    };\n\n    // Wait until the object has been fully created.\n    const bePatient = () => {\n      if (!checkZoomFit()) {\n        setTimeout(() => {\n          bePatient();\n        }, 100);\n      }\n    };\n    bePatient();\n  }\n\n  /**\n   * @private\n   * Perform the actual zoom to fit behavior.\n   * @param {SpaceObject} obj Object to fit within viewport.\n   * @param {Number} offset Add some extra room in the viewport. Increase to be\n   * further zoomed out, decrease to be closer. Default 3.0.\n   */\n  doZoomToFit(obj, offset) {\n    const boundingBox = new THREE.Box3();\n    boundingBox.setFromObject(obj);\n\n    const center = new THREE.Vector3();\n    boundingBox.getCenter(center);\n    const size = new THREE.Vector3();\n    boundingBox.getSize(size);\n\n    // Get the max side of the bounding box (fits to width OR height as needed)\n    const camera = this._camera.get3jsCamera();\n    const maxDim = Math.max(size.x, size.y, size.z);\n    const fov = camera.fov * (Math.PI / 180);\n    const cameraZ = Math.abs((maxDim / 2) * Math.tan(fov * 2)) * offset;\n\n    const objectWorldPosition = new THREE.Vector3();\n    obj.getWorldPosition(objectWorldPosition);\n    const directionVector = camera.position.sub(objectWorldPosition); // Get vector from camera to object\n    const unitDirectionVector = directionVector.normalize(); // Convert to unit vector\n\n    const newpos = unitDirectionVector.multiplyScalar(cameraZ);\n    camera.position.x = newpos.x;\n    camera.position.y = newpos.y;\n    camera.position.z = newpos.z;\n    camera.updateProjectionMatrix();\n\n    // Update default camera pos so if drift is on, camera will drift around\n    // its new position.\n    this._cameraDefaultPos = [newpos.x, newpos.y, newpos.z];\n  }\n\n  /**\n   * Run the animation\n   */\n  start() {\n    this._lastUpdatedTime = Date.now();\n    this._isPaused = false;\n  }\n\n  /**\n   * Stop the animation\n   */\n  stop() {\n    this._isPaused = true;\n  }\n\n  /**\n   * Gets the current JD date of the simulation\n   * @return {Number} JD date\n   */\n  getJd() {\n    return this._jd;\n  }\n\n  /**\n   * Sets the JD date of the simulation.\n   * @param {Number} val JD date\n   */\n  setJd(val) {\n    this._jd = val;\n  }\n\n  /**\n   * Get a date object representing local date and time of the simulation.\n   * @return {Date} Date of simulation\n   */\n  getDate() {\n    return julian.toDate(this._jd);\n  }\n\n  /**\n   * Set the local date and time of the simulation.\n   * @param {Date} date Date of simulation\n   */\n  setDate(date) {\n    this.setJd(Number(julian(date)));\n  }\n\n  /**\n   * Get the JD per frame of the visualization.\n   */\n  getJdDelta() {\n    if (!this._jdDelta) {\n      return this._jdPerSecond / this._fps;\n    }\n    return this._jdDelta;\n  }\n\n  /**\n   * Set the JD per frame of the visualization. This will override any\n   * existing \"JD per second\" setting.\n   * @param {Number} delta JD per frame\n   */\n  setJdDelta(delta) {\n    this._jdDelta = delta;\n  }\n\n  /**\n   * Get the JD change per second of the visualization.\n   * @return {Number} JD per second\n   */\n  getJdPerSecond() {\n    if (this._jdDelta) {\n      // Jd per second can vary\n      return undefined;\n    }\n    return this._jdPerSecond;\n  }\n\n  /**\n   * Set the JD change per second of the visualization.\n   * @return {Number} x JD per second\n   */\n  setJdPerSecond(x) {\n    // Delta overrides jd per second, so unset it.\n    this._jdDelta = undefined;\n\n    this._jdPerSecond = x;\n  }\n\n  /**\n   * Get an object that contains useful context for this visualization\n   * @return {Object} Context object\n   */\n  getContext() {\n    return {\n      simulation: this,\n      options: this._options,\n      objects: {\n        particles: this._particles,\n        camera: this._camera,\n      },\n      container: {\n        width: this._simulationElt.offsetWidth,\n        height: this._simulationElt.offsetHeight,\n      },\n    };\n  }\n\n  /**\n   * Get the element containing this simulation\n   * @return {HTMLElement} The html container of this simulation\n   */\n  getSimulationElement() {\n    return this._simulationElt;\n  }\n\n  /**\n   * Get the Camera and CameraControls wrapper object\n   * @return {Camera} The Camera wrapper\n   */\n  getViewer() {\n    return this._camera;\n  }\n\n  /**\n   * Get the three.js scene object\n   * @return {THREE.Scene} The THREE.js scene object\n   */\n  getScene() {\n    return this._scene;\n  }\n\n  /**\n   * Enable or disable camera drift.\n   * @param {boolean} driftOn True if you want the camera to float around a bit\n   */\n  setCameraDrift(driftOn) {\n    this._enableCameraDrift = driftOn;\n  }\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/Simulation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "class",
    "name": "Simulation",
    "memberof": "src/Simulation.js",
    "static": true,
    "longname": "src/Simulation.js~Simulation",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Simulation.js",
    "importStyle": "{Simulation}",
    "description": "The main entrypoint of a visualization.\n\nThis class wraps a THREE.js scene, controls, skybox, etc in an animated\nSimulation.",
    "examples": [
      "const sim = new Spacekit.Simulation(document.getElementById('my-container'), {\n basePath: '../path/to/assets',\n startDate: Date.now(),\n jd: 0.0,\n jdDelta: 10.0,\n jdPerSecond: 100.0,  // overrides jdDelta\n startPaused: false,\n unitsPerAu: 1.0,\n maxNumParticles: 2**16,\n camera: {\n   initialPosition: [0, -10, 5],\n   enableDrift: false,\n },\n debug: {\n   showAxes: false,\n   showGrid: false,\n   showStats: false,\n },\n});"
    ],
    "lineNumber": 54,
    "interface": false
  },
  {
    "__docId__": 210,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "simulationElt",
        "description": "The container for this simulation."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "for simulation"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.basePath",
        "description": "Path to simulation assets and data"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "options.startDate",
        "description": "The start date and time for this\nsimulation."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jd",
        "description": "The JD date of this simulation.\nDefaults to 0"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jdDelta",
        "description": "The number of JD to add every tick of\nthe simulation."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jdPerSecond",
        "description": "The number of jd to add every second.\nUse this instead of `jdDelta` for constant motion that does not vary with\nframerate.  Defaults to 100."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.unitsPerAu",
        "description": "The number of \"position\" units in the\nsimulation that represent an AU. This is an optional setting that you may\nuse if the default (1 unit = 1 AU) is too small for your simulation (e.g.\nif you are representing a planetary system). Depending on your graphics\ncard, you may begin to notice inaccuracies at fractional scales of GL\nunits, so it becomes necessary to scale the whole visualization.  Defaults\nto 1.0."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.startPaused",
        "description": "Whether the simulation should start\nin a paused state."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.maxNumParticles",
        "description": "The maximum number of particles in\nthe visualization. Try choosing a number that is larger than your\nparticles, but not too much larger. It's usually good enough to choose the\nnext highest power of 2. If you're not showing many particles (tens of\nthousands+), you don't need to worry about this."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.particleTextureUrl",
        "description": "The texture for the default\nparticle system."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.particleDefaultSize",
        "description": "The default size for the\nparticle system."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.camera",
        "description": "Options for camera"
      },
      {
        "nullable": null,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.camera.initialPosition",
        "description": "Initial X, Y, Z\ncoordinates of the camera. Defaults to [0, -10, 5]."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.camera.enableDrift",
        "description": "Set true to have the camera\nfloat around slightly. False by default."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.debug",
        "description": "Options dictating debug state."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.debug.showAxes",
        "description": "Show X, Y, and Z axes"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.debug.showGrid",
        "description": "Show grid on XY plane"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.debug.showStats",
        "description": "Show FPS and other stats\n(requires stats.js)."
      }
    ]
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "_simulationElt",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_simulationElt",
    "access": "private",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "_options",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_options",
    "access": "private",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "_jd",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_jd",
    "access": "private",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "_jdDelta",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_jdDelta",
    "access": "private",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "_jdPerSecond",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_jdPerSecond",
    "access": "private",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "_isPaused",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_isPaused",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "onTick",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#onTick",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "_enableCameraDrift",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_enableCameraDrift",
    "access": "private",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "_cameraDefaultPos",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_cameraDefaultPos",
    "access": "private",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "_camera",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_camera",
    "access": "private",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "_isUsingLightSources",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_isUsingLightSources",
    "access": "private",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "_lightPosition",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_lightPosition",
    "access": "private",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "_subscribedObjects",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_subscribedObjects",
    "access": "private",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "_particles",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_particles",
    "access": "private",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "_stats",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_stats",
    "access": "private",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "_fps",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_fps",
    "access": "private",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "_lastUpdatedTime",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_lastUpdatedTime",
    "access": "private",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "_renderEnabled",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_renderEnabled",
    "access": "private",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "_scene",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_scene",
    "access": "private",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "_renderer",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_renderer",
    "access": "private",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "_composer",
    "memberof": "src/Simulation.js~Simulation",
    "static": false,
    "longname": "src/Simulation.js~Simulation#_composer",
    "access": "private",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "init",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#init",
    "access": "private",
    "description": "",
    "lineNumber": 149,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "initRenderer",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#initRenderer",
    "access": "private",
    "description": "",
    "lineNumber": 222,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "initPasses",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#initPasses",
    "access": "private",
    "description": "",
    "lineNumber": 255,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "update",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#update",
    "access": "private",
    "description": "",
    "lineNumber": 312,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "doCameraDrift",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#doCameraDrift",
    "access": "private",
    "description": "",
    "lineNumber": 324,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "animate",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#animate",
    "access": "private",
    "description": "",
    "lineNumber": 336,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "addObject",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#addObject",
    "access": "public",
    "description": "Add a spacekit object (usually a SpaceObject) to the visualization.",
    "see": [
      "SpaceObject"
    ],
    "lineNumber": 389,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Object to add to visualization"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noUpdate",
        "description": "Set to true if object does not need to be\nanimated."
      }
    ],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "removeObject",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#removeObject",
    "access": "public",
    "description": "Removes an object from the visualization.",
    "lineNumber": 404,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Object to remove"
      }
    ],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "createObject",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#createObject",
    "access": "public",
    "description": "Shortcut for creating a new SpaceObject belonging to this visualization.\nTakes any SpaceObject arguments.",
    "see": [
      "SpaceObject"
    ],
    "lineNumber": 418,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "createShape",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#createShape",
    "access": "public",
    "description": "Shortcut for creating a new ShapeObject belonging to this visualization.\nTakes any ShapeObject arguments.",
    "see": [
      "ShapeObject"
    ],
    "lineNumber": 427,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "createSphere",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#createSphere",
    "access": "public",
    "description": "Shortcut for creating a new SphereOjbect belonging to this visualization.\nTakes any SphereObject arguments.",
    "see": [
      "SphereObject"
    ],
    "lineNumber": 436,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "createStaticParticles",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#createStaticParticles",
    "access": "public",
    "description": "Shortcut for creating a new StaticParticles object belonging to this visualization.\nTakes any StaticParticles arguments.",
    "see": [
      "SphereObject"
    ],
    "lineNumber": 445,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "createSkybox",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#createSkybox",
    "access": "public",
    "description": "Shortcut for creating a new Skybox belonging to this visualization. Takes\nany Skybox arguments.",
    "see": [
      "Skybox"
    ],
    "lineNumber": 454,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "createStars",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#createStars",
    "access": "public",
    "description": "Shortcut for creating a new Stars object belonging to this visualization.\nTakes any Stars arguments.",
    "see": [
      "Stars"
    ],
    "lineNumber": 463,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "createAmbientLight",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#createAmbientLight",
    "access": "public",
    "description": "Creates an ambient light source. This will dimly light everything in the\nvisualization.",
    "lineNumber": 476,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Color of light, default 0x333333"
      }
    ],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "createLight",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#createLight",
    "access": "public",
    "description": "Creates a light source. This will make the shape of your objects visible\nand provide some contrast.",
    "lineNumber": 488,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "Position of light source. Defaults to moving\nwith camera."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Color of light, default 0xFFFFFF"
      }
    ],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "getLightPosition",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#getLightPosition",
    "access": "public",
    "description": null,
    "lineNumber": 517,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "isUsingLightSources",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#isUsingLightSources",
    "access": "public",
    "description": null,
    "lineNumber": 521,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "loadNaturalSatellites",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#loadNaturalSatellites",
    "access": "public",
    "description": "Returns a promise that receives a NaturalSatellites object when it is\nresolved.  @return {Promise<NaturalSatellites>} NaturalSatellites object\nthat is ready to load.",
    "see": [
      "{NaturalSatellites}"
    ],
    "lineNumber": 532,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "renderOnlyInViewport",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#renderOnlyInViewport",
    "access": "public",
    "description": "Installs a scroll handler that only renders the visualization while it is\nin the user's viewport.\n\nThe scroll handler currently binds to the window object only.",
    "lineNumber": 542,
    "params": [],
    "return": null
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "zoomToFit",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#zoomToFit",
    "access": "public",
    "description": "Adjust camera position so that the object fits within the viewport. If\napplicable, this function will fit around the object's orbit.",
    "lineNumber": 586,
    "params": [
      {
        "nullable": null,
        "types": [
          "SpaceObject"
        ],
        "spread": false,
        "optional": false,
        "name": "spaceObj",
        "description": "Object to fit within viewport."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "Add some extra room in the viewport. Increase to be\nfurther zoomed out, decrease to be closer. Default 3.0."
      }
    ],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "doZoomToFit",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#doZoomToFit",
    "access": "private",
    "description": "",
    "lineNumber": 615,
    "params": [
      {
        "nullable": null,
        "types": [
          "SpaceObject"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Object to fit within viewport."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "Add some extra room in the viewport. Increase to be\nfurther zoomed out, decrease to be closer. Default 3.0."
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "start",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#start",
    "access": "public",
    "description": "Run the animation",
    "lineNumber": 649,
    "params": [],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "stop",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#stop",
    "access": "public",
    "description": "Stop the animation",
    "lineNumber": 657,
    "params": [],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "getJd",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#getJd",
    "access": "public",
    "description": "Gets the current JD date of the simulation",
    "lineNumber": 665,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "JD date"
    },
    "params": []
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "setJd",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#setJd",
    "access": "public",
    "description": "Sets the JD date of the simulation.",
    "lineNumber": 673,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "JD date"
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "getDate",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#getDate",
    "access": "public",
    "description": "Get a date object representing local date and time of the simulation.",
    "lineNumber": 681,
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": "Date of simulation"
    },
    "params": []
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "setDate",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#setDate",
    "access": "public",
    "description": "Set the local date and time of the simulation.",
    "lineNumber": 689,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Date of simulation"
      }
    ],
    "return": null
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "getJdDelta",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#getJdDelta",
    "access": "public",
    "description": "Get the JD per frame of the visualization.",
    "lineNumber": 696,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "setJdDelta",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#setJdDelta",
    "access": "public",
    "description": "Set the JD per frame of the visualization. This will override any\nexisting \"JD per second\" setting.",
    "lineNumber": 708,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "JD per frame"
      }
    ],
    "return": null
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "getJdPerSecond",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#getJdPerSecond",
    "access": "public",
    "description": "Get the JD change per second of the visualization.",
    "lineNumber": 716,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "JD per second"
    },
    "params": []
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "setJdPerSecond",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#setJdPerSecond",
    "access": "public",
    "description": "Set the JD change per second of the visualization.",
    "lineNumber": 728,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "x JD per second"
    },
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "getContext",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#getContext",
    "access": "public",
    "description": "Get an object that contains useful context for this visualization",
    "lineNumber": 739,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Context object"
    },
    "params": []
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "getSimulationElement",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#getSimulationElement",
    "access": "public",
    "description": "Get the element containing this simulation",
    "lineNumber": 758,
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "The html container of this simulation"
    },
    "params": []
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "getViewer",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#getViewer",
    "access": "public",
    "description": "Get the Camera and CameraControls wrapper object",
    "lineNumber": 766,
    "return": {
      "nullable": null,
      "types": [
        "Camera"
      ],
      "spread": false,
      "description": "The Camera wrapper"
    },
    "params": []
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "getScene",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#getScene",
    "access": "public",
    "description": "Get the three.js scene object",
    "lineNumber": 774,
    "return": {
      "nullable": null,
      "types": [
        "THREE.Scene"
      ],
      "spread": false,
      "description": "The THREE.js scene object"
    },
    "params": []
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "setCameraDrift",
    "memberof": "src/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Simulation.js~Simulation#setCameraDrift",
    "access": "public",
    "description": "Enable or disable camera drift.",
    "lineNumber": 782,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "driftOn",
        "description": "True if you want the camera to float around a bit"
      }
    ],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "src/Skybox.js",
    "content": "import * as THREE from 'three';\n\nimport { getFullTextureUrl } from './util';\n\n/**\n * A class that adds a skybox (technically a skysphere) to a visualization.\n */\nexport class Skybox {\n  /**\n   * @param {Object} options Options\n   * @param {String} options.textureUrl Texture to use\n   * @param {String} options.basePath Base path to simulation supporting files\n   * @param {Object} contextOrSimulation Simulation context or simulation\n   * object\n   */\n  constructor(options, contextOrSimulation) {\n    // TODO(ian): Support for actual box instead of sphere...\n    this._options = options;\n    this._id = `__skybox_${new Date().getTime()}`;\n\n    // if (contextOrSimulation instanceOf Simulation) {\n    if (true) {\n      // User passed in Simulation\n      this._simulation = contextOrSimulation;\n      this._context = contextOrSimulation.getContext();\n    } else {\n      // User just passed in options\n      this._simulation = null;\n      this._context = contextOrSimulation;\n    }\n\n    this._mesh = undefined;\n\n    this.init();\n  }\n\n  /**\n   * @private\n   */\n  init() {\n    const geometry = new THREE.SphereBufferGeometry(1e10, 32, 32);\n\n    const fullTextureUrl = getFullTextureUrl(\n      this._options.textureUrl,\n      this._context.options.basePath,\n    );\n    const texture = new THREE.TextureLoader().load(fullTextureUrl);\n\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      side: THREE.BackSide,\n    });\n\n    const sky = new THREE.Mesh(geometry, material);\n\n    // See this thread on orientation of milky way:\n    // https://www.physicsforums.com/threads/orientation-of-the-earth-sun-and-solar-system-in-the-milky-way.888643/\n    sky.rotation.x = 0;\n    sky.rotation.y = (-1 / 12) * Math.PI;\n    sky.rotation.z = (8 / 5) * Math.PI;\n\n    // We're on the inside of the skybox, so invert it to correct it.\n    sky.scale.set(-1, 1, 1);\n\n    this._mesh = sky;\n\n    if (this._simulation) {\n      this._simulation.addObject(this, true /* noUpdate */);\n    }\n  }\n\n  /**\n   * A list of THREE.js objects that are used to compose the skybox.\n   * @return {THREE.Object} Skybox mesh\n   */\n  get3jsObjects() {\n    return [this._mesh];\n  }\n\n  /**\n   * Get the unique ID of this object.\n   * @return {String} id\n   */\n  getId() {\n    return this._id;\n  }\n}\n\n/**\n * Preset skybox objects that you can use to add a skybox to your\n * visualization.\n * @example\n * const skybox = viz.createSkybox(Spacekit.SkyboxPresets.NASA_TYCHO);\n */\nexport const SkyboxPresets = {\n  ESO_GIGAGALAXY: {\n    textureUrl: '{{assets}}/skybox/eso_milkyway.jpg',\n  },\n  ESO_LITE: {\n    textureUrl: '{{assets}}/skybox/eso_lite.png',\n  },\n  NASA_TYCHO: {\n    // from https://svs.gsfc.nasa.gov/3895\n    textureUrl: '{{assets}}/skybox/nasa_tycho.jpg',\n  },\n};\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/Skybox.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "class",
    "name": "Skybox",
    "memberof": "src/Skybox.js",
    "static": true,
    "longname": "src/Skybox.js~Skybox",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Skybox.js",
    "importStyle": "{Skybox}",
    "description": "A class that adds a skybox (technically a skysphere) to a visualization.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 300,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Skybox.js~Skybox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Skybox.js~Skybox#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.textureUrl",
        "description": "Texture to use"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.basePath",
        "description": "Base path to simulation supporting files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "contextOrSimulation",
        "description": "Simulation context or simulation\nobject"
      }
    ]
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "_options",
    "memberof": "src/Skybox.js~Skybox",
    "static": false,
    "longname": "src/Skybox.js~Skybox#_options",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "_id",
    "memberof": "src/Skybox.js~Skybox",
    "static": false,
    "longname": "src/Skybox.js~Skybox#_id",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "_simulation",
    "memberof": "src/Skybox.js~Skybox",
    "static": false,
    "longname": "src/Skybox.js~Skybox#_simulation",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "_context",
    "memberof": "src/Skybox.js~Skybox",
    "static": false,
    "longname": "src/Skybox.js~Skybox#_context",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "_mesh",
    "memberof": "src/Skybox.js~Skybox",
    "static": false,
    "longname": "src/Skybox.js~Skybox#_mesh",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "init",
    "memberof": "src/Skybox.js~Skybox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Skybox.js~Skybox#init",
    "access": "private",
    "description": "",
    "lineNumber": 40,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "get3jsObjects",
    "memberof": "src/Skybox.js~Skybox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Skybox.js~Skybox#get3jsObjects",
    "access": "public",
    "description": "A list of THREE.js objects that are used to compose the skybox.",
    "lineNumber": 76,
    "return": {
      "nullable": null,
      "types": [
        "THREE.Object"
      ],
      "spread": false,
      "description": "Skybox mesh"
    },
    "params": []
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "getId",
    "memberof": "src/Skybox.js~Skybox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Skybox.js~Skybox#getId",
    "access": "public",
    "description": "Get the unique ID of this object.",
    "lineNumber": 84,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "id"
    },
    "params": []
  },
  {
    "__docId__": 312,
    "kind": "variable",
    "name": "SkyboxPresets",
    "memberof": "src/Skybox.js",
    "static": true,
    "longname": "src/Skybox.js~SkyboxPresets",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Skybox.js",
    "importStyle": "{SkyboxPresets}",
    "description": "Preset skybox objects that you can use to add a skybox to your\nvisualization.",
    "examples": [
      "const skybox = viz.createSkybox(Spacekit.SkyboxPresets.NASA_TYCHO);"
    ],
    "lineNumber": 95,
    "type": {
      "types": [
        "{\"ESO_GIGAGALAXY\": *, \"ESO_LITE\": *, \"NASA_TYCHO\": *}"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "file",
    "name": "src/SpaceObject.js",
    "content": "import * as THREE from 'three';\n\nimport { EphemPresets } from './EphemPresets';\nimport { Orbit } from './Orbit';\nimport { getFullTextureUrl } from './util';\nimport { rescaleArray, rescaleNumber } from './Scale';\n\n/**\n * @private\n * Minimum number of degrees per day an object must move in order for its\n * position to be updated in the visualization.\n */\nconst MIN_DEG_MOVE_PER_DAY = 0.05;\n\n/**\n * @private\n * Number of milliseconds between label position updates.\n */\nconst LABEL_UPDATE_MS = 30;\n\n/**\n * @private\n * Converts (X, Y, Z) position in visualization to pixel coordinates.\n */\nfunction toScreenXY(position, camera, canvas) {\n  const pos = new THREE.Vector3(position[0], position[1], position[2]);\n  const projScreenMat = new THREE.Matrix4();\n  projScreenMat.multiplyMatrices(\n    camera.projectionMatrix,\n    camera.matrixWorldInverse,\n  );\n  pos.applyMatrix4(projScreenMat);\n  return {\n    x: ((pos.x + 1) * canvas.clientWidth) / 2,\n    y: ((-pos.y + 1) * canvas.clientHeight) / 2,\n  };\n}\n\n/**\n * An object that can be added to a visualization.\n * @example\n * const myObject = viz.addObject('planet1', {\n *   position: [0, 0, 0],\n *   scale: [1, 1, 1],\n *   particleSize: 5,\n *   labelText: 'My object',\n *   labelUrl: 'http://...',\n *   hideOrbit: false,\n *   ephem: new Spacekit.Ephem({...}),\n *   textureUrl: '/path/to/spriteTexture.png',\n *   basePath: '/base',\n *   ecliptic: {\n *     lineColor: 0xCCCCCC,\n *     displayLines: false,\n *   },\n *   theme: {\n *     color: 0xFFFFFF,\n *     orbitColor: 0x888888,\n *   },\n * });\n */\nexport class SpaceObject {\n  /**\n   * @param {String} id Unique id of this object\n   * @param {Object} options Options container\n   * @param {Array.<Number>} options.position [X, Y, Z] heliocentric coordinates of object. Defaults to [0, 0, 0]\n   * @param {Array.<Number>} options.scale Scale of object on each [X, Y, Z] axis. Defaults to [1, 1, 1]\n   * @param {Number} options.particleSize Size of particle if this object is a Kepler object being represented as a particle.\n   * @param {String} options.labelText Text label to display above object (set undefined for no label)\n   * @param {String} options.labelUrl Label becomes a link that goes to this url.\n   * @param {boolean} options.hideOrbit If true, don't show an orbital ellipse. Defaults false.\n   * @param {Ephem} options.ephem Ephemerides for this orbit\n   * @param {String} options.textureUrl Texture for sprite\n   * @param {String} options.basePath Base path for simulation assets and data\n   * @param {Object} options.ecliptic Contains settings related to ecliptic\n   * @param {Number} options.ecliptic.lineColor Hex color of lines that run perpendicular to ecliptic. @see Orbit\n   * @param {boolean} options.ecliptic.displayLines Whether to show ecliptic lines. Defaults false.\n   * @param {Object} options.theme Contains settings related to appearance of orbit\n   * @param {Number} options.theme.color Hex color of the object, if applicable\n   * @param {Number} options.theme.orbitColor Hex color of the orbit\n   * @param {Object} contextOrSimulation Simulation context or simulation object\n   * @param {boolean} autoInit Automatically initialize this object. If false\n   * you must call init() manually.\n   */\n  constructor(id, options, contextOrSimulation, autoInit = true) {\n    this._id = id;\n    this._options = options || {};\n    this._object3js = undefined;\n\n    // if (contextOrSimulation instanceOf Simulation) {\n    if (true) {\n      // User passed in Simulation\n      this._simulation = contextOrSimulation;\n      this._context = contextOrSimulation.getContext();\n    } else {\n      // User just passed in options\n      this._simulation = null;\n      this._context = contextOrSimulation;\n    }\n\n    this._renderMethod = null;\n\n    this._label = null;\n    this._showLabel = false;\n    this._lastLabelUpdate = 0;\n    this._lastPositionUpdate = 0;\n\n    this._position = rescaleArray(this._options.position || [0, 0, 0]);\n    this._orbitAround = undefined;\n    this._scale = this._options.scale || [1, 1, 1];\n\n    // The method of rendering used for this object (e.g. SPRITE, PARTICLESYSTEM).\n    this._renderMethod = undefined;\n\n    // The index of this particle in the KeplerParticles system, if applicable.\n    this._particleIndex = undefined;\n\n    // Number of degrees moved per day. Used to limit the number of orbit\n    // updates for very slow moving objects.\n    this._degreesPerDay = this._options.ephem\n      ? this._options.ephem.get('n', 'deg')\n      : undefined;\n\n    this._initialized = false;\n    if (autoInit && !this.init()) {\n      console.warn(`SpaceObject ${id}: failed to initialize`);\n    }\n  }\n\n  /**\n   * Initializes label and three.js objects. Called automatically unless you've\n   * set autoInit to false in constructor (this init is suppressed by some\n   * child classes).\n   */\n  init() {\n    this.renderObject();\n\n    if (this._options.labelText) {\n      const labelElt = this.createLabel();\n      this._simulation.getSimulationElement().appendChild(labelElt);\n      this._label = labelElt;\n      this._showLabel = true;\n    }\n    this._initialized = true;\n    return true;\n  }\n\n  /**\n   * @protected\n   * Used by child classes to set the object that gets its position updated.\n   * @param {THREE.Object3D} obj Any THREE.js object\n   */\n  setPositionedObject(obj) {\n    this._object3js = obj;\n  }\n\n  /**\n   * @private\n   * Build the THREE.js object for this SpaceObject.\n   */\n  renderObject() {\n    if (this.isStaticObject()) {\n      if (!this._renderMethod) {\n        // TODO(ian): It kinda sucks to have SpaceObject care about\n        // renderMethod, which is set by children.\n\n        // Create a stationary sprite.\n        this._object3js = this.createSprite();\n        if (this._simulation) {\n          // Add it all to visualization.\n          this._simulation.addObject(this, false /* noUpdate */);\n        }\n        this._renderMethod = 'SPRITE';\n      }\n    } else {\n      // Create the orbit no matter what - it's used to get current position\n      // for CPU-positioned objects (e.g. child RotatingObjects, SphereObjects,\n      // ShapeObjects).\n      // TODO(ian): Only do this if we need to compute orbit position on the\n      // CPU or display an orbit path.\n      this._orbit = this.createOrbit();\n\n      if (!this._options.hideOrbit && this._simulation) {\n        // Add it all to visualization.\n        this._simulation.addObject(this, false /* noUpdate */);\n      }\n\n      if (!this._renderMethod) {\n        // Create a particle representing this object on the GPU.\n        this._particleIndex = this._context.objects.particles.addParticle(\n          this._options.ephem,\n          {\n            particleSize: this._options.particleSize,\n            color: this.getColor(),\n          },\n        );\n        this._renderMethod = 'PARTICLESYSTEM';\n      }\n    }\n  }\n\n  /**\n   * @private\n   * Builds the label div and adds it to the visualization\n   * @return {HTMLElement} A div that contains the label for this object\n   */\n  createLabel() {\n    const text = document.createElement('div');\n    text.className = 'spacekit__object-label';\n\n    const { labelText, labelUrl } = this._options;\n    if (this._options.labelUrl) {\n      text.innerHTML = `<div><a target=\"_blank\" href=\"${labelUrl}\">${labelText}</a></div>`;\n    } else {\n      text.innerHTML = `<div>${labelText}</div>`;\n    }\n    text.style.fontFamily = 'Arial';\n    text.style.fontSize = '12px';\n    text.style.color = '#fff';\n    text.style.position = 'absolute';\n    text.style.marginLeft = '1.5em';\n\n    text.style.backgroundColor = '#0009';\n    text.style.borderRadius = '4px';\n    text.style.padding = '0px 1px';\n    text.style.border = '1px solid #5f5f5f';\n\n    return text;\n  }\n\n  /**\n   * @private\n   * Updates the label's position\n   * @param {Array.Number} newpos Position of the label in the visualization's\n   * coordinate system\n   */\n  updateLabelPosition(newpos) {\n    const label = this._label;\n    const simulationElt = this._simulation.getSimulationElement();\n    const pos = toScreenXY(\n      newpos,\n      this._simulation.getViewer().get3jsCamera(),\n      simulationElt,\n    );\n    const loc = {\n      left: pos.x - 30,\n      top: pos.y - 25,\n      right: pos.x + label.clientWidth - 20,\n      bottom: pos.y + label.clientHeight,\n    };\n    if (\n      loc.left > 0 &&\n      loc.right < simulationElt.clientWidth &&\n      loc.top > 0 &&\n      loc.bottom < simulationElt.clientHeight\n    ) {\n      label.style.left = `${loc.left}px`;\n      label.style.top = `${loc.top}px`;\n      label.style.visibility = 'visible';\n    } else {\n      label.style.visibility = 'hidden';\n    }\n  }\n\n  /**\n   * @private\n   * Builds the sprite for this object\n   * @return {THREE.Sprite} A sprite object\n   */\n  createSprite() {\n    const fullTextureUrl = getFullTextureUrl(\n      this._options.textureUrl,\n      this._context.options.basePath,\n    );\n    const texture = new THREE.TextureLoader().load(fullTextureUrl);\n    const sprite = new THREE.Sprite(\n      new THREE.SpriteMaterial({\n        map: texture,\n        blending: THREE.AdditiveBlending,\n        depthWrite: false,\n        color: this._options.theme ? this._options.theme.color : 0xffffff,\n      }),\n    );\n    const scale = rescaleArray(this._scale);\n    sprite.scale.set(scale[0], scale[1], scale[2]);\n    const position = this.getPosition(this._simulation.getJd());\n    sprite.position.set(position[0], position[1], position[2]);\n\n    if (this.isStaticObject()) {\n      sprite.updateMatrix();\n      sprite.matrixAutoUpdate = false;\n    }\n\n    return sprite;\n  }\n\n  /**\n   * @private\n   * Builds the {Orbit} for this object\n   * @return {Orbit} An orbit object\n   */\n  createOrbit() {\n    if (this._orbit) {\n      return this._orbit;\n    }\n    return new Orbit(this._options.ephem, {\n      color: this._options.theme ? this._options.theme.orbitColor : undefined,\n      eclipticLineColor: this._options.ecliptic\n        ? this._options.ecliptic.lineColor\n        : undefined,\n    });\n  }\n\n  /**\n   * @private\n   * Determines whether to update the position of an update. Don't update if JD\n   * threshold is less than a certain amount.\n   * @param {Number} afterJd Next JD\n   * @return {boolean} Whether to update\n   */\n  shouldUpdateObjectPosition(afterJd) {\n    // TODO(ian): Reenable this as a function of zoom level, because as you get\n    // closer the chopiness gets more noticeable.\n    return true;\n    /*\n    if (!this._degreesPerDay || !this._lastPositionUpdate) {\n      return true;\n    }\n    const degMove = this._degreesPerDay * (afterJd - this._lastPositionUpdate);\n    if (degMove < MIN_DEG_MOVE_PER_DAY) {\n      return false;\n    }\n    return true;\n    */\n  }\n\n  /**\n   * Make this object orbit another orbit.\n   * @param {Object} spaceObj The SpaceObject that will serve as the origin of this object's orbit.\n   */\n  orbitAround(spaceObj) {\n    if (this._renderMethod !== 'PARTICLESYSTEM') {\n      console.error(\n        `\"${this._renderMethod}\" is not a valid render method for \\`setOrbitCenter\\`. Required: PARTICLESYSTEM`,\n      );\n      return;\n    }\n\n    this._orbitAround = spaceObj;\n  }\n\n  /**\n   * Updates the position of this object. Applicable only if this object is a\n   * sprite and not a particle type.\n   * @param {Number} x X position\n   * @param {Number} y Y position\n   * @param {Number} z Z position\n   */\n  setPosition(x, y, z) {\n    this._position[0] = rescaleNumber(x);\n    this._position[1] = rescaleNumber(y);\n    this._position[2] = rescaleNumber(z);\n  }\n\n  /**\n   * Gets the visualization coordinates of this object at a given time.\n   * @param {Number} jd JD date\n   * @return {Array.<Number>} [X, Y,Z] coordinates\n   */\n  getPosition(jd) {\n    const pos = this._position;\n    if (!this._orbit) {\n      // Default implementation, a static object.\n      return pos;\n    }\n\n    const posModified = this._orbit.getPositionAtTime(jd);\n    if (this._orbitAround) {\n      const parentPos = this._orbitAround.getPosition(jd);\n      return [\n        pos[0] + posModified[0] + parentPos[0],\n        pos[1] + posModified[1] + parentPos[1],\n        pos[2] + posModified[2] + parentPos[2],\n      ];\n    }\n    return [\n      pos[0] + posModified[0],\n      pos[1] + posModified[1],\n      pos[2] + posModified[2],\n    ];\n  }\n\n  /**\n   * Updates the object and its label positions for a given time.\n   * @param {Number} jd JD date\n   */\n  update(jd) {\n    if (this.isStaticObject()) {\n      return;\n    }\n\n    let newpos;\n    let shouldUpdateObjectPosition = false;\n    if (this._object3js || this._label) {\n      shouldUpdateObjectPosition = this.shouldUpdateObjectPosition(jd);\n    }\n    if (this._object3js && shouldUpdateObjectPosition) {\n      newpos = this.getPosition(jd);\n      this._object3js.position.set(newpos[0], newpos[1], newpos[2]);\n      this._lastPositionUpdate = jd;\n    }\n\n    if (this._orbitAround) {\n      const parentPos = this._orbitAround.getPosition(jd);\n      this._context.objects.particles.setParticleOrigin(\n        this._particleIndex,\n        parentPos,\n      );\n      if (!this._options.hideOrbit) {\n        this._orbit\n          .getOrbitShape()\n          .position.set(parentPos[0], parentPos[1], parentPos[2]);\n      }\n      if (!newpos) {\n        newpos = this.getPosition(jd);\n      }\n    }\n\n    // TODO(ian): Determine this based on orbit and camera position change.\n    const shouldUpdateLabelPos =\n      +new Date() - this._lastLabelUpdate > LABEL_UPDATE_MS && this._showLabel;\n    if (this._label && shouldUpdateLabelPos) {\n      if (!newpos) {\n        newpos = this.getPosition(jd);\n      }\n      this.updateLabelPosition(newpos);\n      this._lastLabelUpdate = +new Date();\n    }\n  }\n\n  /**\n   * Gets the THREE.js objects that represent this SpaceObject.  The first\n   * object returned is the primary object.  Other objects may be returned,\n   * such as rings, ellipses, etc.\n   * @return {Array.<THREE.Object>} A list of THREE.js objects\n   */\n  get3jsObjects() {\n    const ret = [];\n    if (this._object3js) {\n      ret.push(this._object3js);\n    }\n    if (this._orbit) {\n      ret.push(this._orbit.getOrbitShape());\n      if (this._options.ecliptic && this._options.ecliptic.displayLines) {\n        ret.push(this._orbit.getLinesToEcliptic());\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Specifies the object that is used to compute the bounding box. By default,\n   * this will be the first THREE.js object in this class's list of objects.\n   * @return {THREE.Object3D} THREE.js object\n   */\n  getBoundingObject() {\n    return this.get3jsObjects()[0];\n  }\n\n  /**\n   * Gets the color of this object. Usually this corresponds to the color of\n   * the dot representing the object as well as its orbit.\n   * @return {Number} A hexidecimal color value, e.g. 0xFFFFFF\n   */\n  getColor() {\n    if (this._options.theme) {\n      return this._options.theme.color || 0xffffff;\n    }\n    return 0xffffff;\n  }\n\n  /**\n   * Gets the {Orbit} object for this SpaceObject.\n   * @return {Orbit} Orbit object\n   */\n  getOrbit() {\n    return this._orbit;\n  }\n\n  /**\n   * Gets label visilibity status.\n   * @return {boolean} Whether label is visible.\n   */\n  getLabelVisibility() {\n    return this._showLabel;\n  }\n\n  /**\n   * Toggle the visilibity of the label.\n   * @param {boolean} val Whether to show or hide.\n   */\n  setLabelVisibility(val) {\n    if (val) {\n      this._showLabel = true;\n      this._label.style.display = 'block';\n    } else {\n      this._showLabel = false;\n      this._label.style.display = 'none';\n    }\n  }\n\n  /**\n   * Gets the unique ID of this object.\n   * @return {String} Unique ID\n   */\n  getId() {\n    return this._id;\n  }\n\n  /**\n   * Determines whether object is static (can't change its position) or whether\n   * its position can be updated (ie, it has ephemeris)\n   * @return {boolean} Whether this object can change its position.\n   */\n  isStaticObject() {\n    return !this._options.ephem;\n  }\n\n  /**\n   * Determines whether object is ready to be measured or added to scene.\n   * @return {boolean} True if ready\n   */\n  isReady() {\n    return this._initialized;\n  }\n}\n\nconst DEFAULT_PLANET_TEXTURE_URL = '{{assets}}/sprites/smallparticle.png';\n\n/**\n * Useful presets for creating SpaceObjects.\n * @example\n * const myobject = viz.addObject('planet1', Spacekit.SpaceObjectPresets.MERCURY);\n */\nexport const SpaceObjectPresets = {\n  SUN: {\n    textureUrl: '{{assets}}/sprites/lensflare0.png',\n    position: [0, 0, 0],\n  },\n  MERCURY: {\n    textureUrl: DEFAULT_PLANET_TEXTURE_URL,\n    theme: {\n      color: 0x913cee,\n    },\n    ephem: EphemPresets.MERCURY,\n  },\n  VENUS: {\n    textureUrl: DEFAULT_PLANET_TEXTURE_URL,\n    theme: {\n      color: 0xff7733,\n    },\n    ephem: EphemPresets.VENUS,\n  },\n  EARTH: {\n    textureUrl: DEFAULT_PLANET_TEXTURE_URL,\n    theme: {\n      color: 0x009acd,\n    },\n    ephem: EphemPresets.EARTH,\n  },\n  MOON: {\n    textureUrl: DEFAULT_PLANET_TEXTURE_URL,\n    theme: {\n      color: 0xffd700,\n    },\n    ephem: EphemPresets.MOON,\n\n    // Special params\n    particleSize: 6,\n  },\n  MARS: {\n    textureUrl: DEFAULT_PLANET_TEXTURE_URL,\n    theme: {\n      color: 0xa63a3a,\n    },\n    ephem: EphemPresets.MARS,\n  },\n  JUPITER: {\n    textureUrl: DEFAULT_PLANET_TEXTURE_URL,\n    theme: {\n      color: 0xffb90f,\n    },\n    ephem: EphemPresets.JUPITER,\n  },\n  SATURN: {\n    textureUrl: DEFAULT_PLANET_TEXTURE_URL,\n    theme: {\n      color: 0x336633,\n    },\n    ephem: EphemPresets.SATURN,\n  },\n  URANUS: {\n    textureUrl: DEFAULT_PLANET_TEXTURE_URL,\n    theme: {\n      color: 0x0099ff,\n    },\n    ephem: EphemPresets.URANUS,\n  },\n  NEPTUNE: {\n    textureUrl: DEFAULT_PLANET_TEXTURE_URL,\n    theme: {\n      color: 0x3333ff,\n    },\n    ephem: EphemPresets.NEPTUNE,\n  },\n  PLUTO: {\n    textureUrl: DEFAULT_PLANET_TEXTURE_URL,\n    theme: {\n      color: 0xccc0b0,\n    },\n    ephem: EphemPresets.PLUTO,\n  },\n};\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/SpaceObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 314,
    "kind": "variable",
    "name": "MIN_DEG_MOVE_PER_DAY",
    "memberof": "src/SpaceObject.js",
    "static": true,
    "longname": "src/SpaceObject.js~MIN_DEG_MOVE_PER_DAY",
    "access": "private",
    "export": false,
    "importPath": "spacekit/src/SpaceObject.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "variable",
    "name": "LABEL_UPDATE_MS",
    "memberof": "src/SpaceObject.js",
    "static": true,
    "longname": "src/SpaceObject.js~LABEL_UPDATE_MS",
    "access": "private",
    "export": false,
    "importPath": "spacekit/src/SpaceObject.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 19,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "function",
    "name": "toScreenXY",
    "memberof": "src/SpaceObject.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SpaceObject.js~toScreenXY",
    "access": "private",
    "export": false,
    "importPath": "spacekit/src/SpaceObject.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "name": "position",
        "types": [
          "*"
        ]
      },
      {
        "name": "camera",
        "types": [
          "*"
        ]
      },
      {
        "name": "canvas",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "class",
    "name": "SpaceObject",
    "memberof": "src/SpaceObject.js",
    "static": true,
    "longname": "src/SpaceObject.js~SpaceObject",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/SpaceObject.js",
    "importStyle": "{SpaceObject}",
    "description": "An object that can be added to a visualization.",
    "examples": [
      "const myObject = viz.addObject('planet1', {\n  position: [0, 0, 0],\n  scale: [1, 1, 1],\n  particleSize: 5,\n  labelText: 'My object',\n  labelUrl: 'http://...',\n  hideOrbit: false,\n  ephem: new Spacekit.Ephem({...}),\n  textureUrl: '/path/to/spriteTexture.png',\n  basePath: '/base',\n  ecliptic: {\n    lineColor: 0xCCCCCC,\n    displayLines: false,\n  },\n  theme: {\n    color: 0xFFFFFF,\n    orbitColor: 0x888888,\n  },\n});"
    ],
    "lineNumber": 62,
    "interface": false
  },
  {
    "__docId__": 318,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Unique id of this object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options container"
      },
      {
        "nullable": null,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.position",
        "description": "[X, Y, Z] heliocentric coordinates of object. Defaults to [0, 0, 0]"
      },
      {
        "nullable": null,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.scale",
        "description": "Scale of object on each [X, Y, Z] axis. Defaults to [1, 1, 1]"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.particleSize",
        "description": "Size of particle if this object is a Kepler object being represented as a particle."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.labelText",
        "description": "Text label to display above object (set undefined for no label)"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.labelUrl",
        "description": "Label becomes a link that goes to this url."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.hideOrbit",
        "description": "If true, don't show an orbital ellipse. Defaults false."
      },
      {
        "nullable": null,
        "types": [
          "Ephem"
        ],
        "spread": false,
        "optional": false,
        "name": "options.ephem",
        "description": "Ephemerides for this orbit"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.textureUrl",
        "description": "Texture for sprite"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.basePath",
        "description": "Base path for simulation assets and data"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.ecliptic",
        "description": "Contains settings related to ecliptic"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.ecliptic.lineColor",
        "description": "Hex color of lines that run perpendicular to ecliptic. @see Orbit"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.ecliptic.displayLines",
        "description": "Whether to show ecliptic lines. Defaults false."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.theme",
        "description": "Contains settings related to appearance of orbit"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.theme.color",
        "description": "Hex color of the object, if applicable"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.theme.orbitColor",
        "description": "Hex color of the orbit"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "contextOrSimulation",
        "description": "Simulation context or simulation object"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "autoInit",
        "description": "Automatically initialize this object. If false\nyou must call init() manually."
      }
    ]
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "_id",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_id",
    "access": "private",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "_options",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_options",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "_object3js",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_object3js",
    "access": "private",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "_simulation",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_simulation",
    "access": "private",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "member",
    "name": "_context",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_context",
    "access": "private",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "_renderMethod",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_renderMethod",
    "access": "private",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "_label",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_label",
    "access": "private",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "member",
    "name": "_showLabel",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_showLabel",
    "access": "private",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "_lastLabelUpdate",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_lastLabelUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "member",
    "name": "_lastPositionUpdate",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_lastPositionUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "_position",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_position",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "_orbitAround",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_orbitAround",
    "access": "private",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "_scale",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_scale",
    "access": "private",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "_particleIndex",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_particleIndex",
    "access": "private",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "_degreesPerDay",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_degreesPerDay",
    "access": "private",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "_initialized",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_initialized",
    "access": "private",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "init",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#init",
    "access": "public",
    "description": "Initializes label and three.js objects. Called automatically unless you've\nset autoInit to false in constructor (this init is suppressed by some\nchild classes).",
    "lineNumber": 135,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "setPositionedObject",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#setPositionedObject",
    "access": "protected",
    "description": "",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "THREE.Object3D"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Any THREE.js object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "renderObject",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#renderObject",
    "access": "private",
    "description": "",
    "lineNumber": 161,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "_orbit",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#_orbit",
    "access": "private",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "createLabel",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#createLabel",
    "access": "private",
    "description": "",
    "lineNumber": 207,
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "A div that contains the label for this object"
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "updateLabelPosition",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#updateLabelPosition",
    "access": "private",
    "description": "",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.Number"
        ],
        "spread": false,
        "optional": false,
        "name": "newpos",
        "description": "Position of the label in the visualization's\ncoordinate system"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "createSprite",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#createSprite",
    "access": "private",
    "description": "",
    "lineNumber": 270,
    "return": {
      "nullable": null,
      "types": [
        "THREE.Sprite"
      ],
      "spread": false,
      "description": "A sprite object"
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "createOrbit",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#createOrbit",
    "access": "private",
    "description": "",
    "lineNumber": 302,
    "return": {
      "nullable": null,
      "types": [
        "Orbit"
      ],
      "spread": false,
      "description": "An orbit object"
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "shouldUpdateObjectPosition",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#shouldUpdateObjectPosition",
    "access": "private",
    "description": "",
    "lineNumber": 321,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "afterJd",
        "description": "Next JD"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether to update"
    },
    "ignore": true
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "orbitAround",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#orbitAround",
    "access": "public",
    "description": "Make this object orbit another orbit.",
    "lineNumber": 341,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "spaceObj",
        "description": "The SpaceObject that will serve as the origin of this object's orbit."
      }
    ],
    "return": null
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#setPosition",
    "access": "public",
    "description": "Updates the position of this object. Applicable only if this object is a\nsprite and not a particle type.",
    "lineNumber": 359,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "Z position"
      }
    ],
    "return": null
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "getPosition",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#getPosition",
    "access": "public",
    "description": "Gets the visualization coordinates of this object at a given time.",
    "lineNumber": 370,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "jd",
        "description": "JD date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Number>"
      ],
      "spread": false,
      "description": "[X, Y,Z] coordinates"
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "update",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#update",
    "access": "public",
    "description": "Updates the object and its label positions for a given time.",
    "lineNumber": 397,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "jd",
        "description": "JD date"
      }
    ],
    "return": null
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "get3jsObjects",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#get3jsObjects",
    "access": "public",
    "description": "Gets the THREE.js objects that represent this SpaceObject.  The first\nobject returned is the primary object.  Other objects may be returned,\nsuch as rings, ellipses, etc.",
    "lineNumber": 447,
    "return": {
      "nullable": null,
      "types": [
        "Array.<THREE.Object>"
      ],
      "spread": false,
      "description": "A list of THREE.js objects"
    },
    "params": []
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "getBoundingObject",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#getBoundingObject",
    "access": "public",
    "description": "Specifies the object that is used to compute the bounding box. By default,\nthis will be the first THREE.js object in this class's list of objects.",
    "lineNumber": 466,
    "return": {
      "nullable": null,
      "types": [
        "THREE.Object3D"
      ],
      "spread": false,
      "description": "THREE.js object"
    },
    "params": []
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "getColor",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#getColor",
    "access": "public",
    "description": "Gets the color of this object. Usually this corresponds to the color of\nthe dot representing the object as well as its orbit.",
    "lineNumber": 475,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "A hexidecimal color value, e.g. 0xFFFFFF"
    },
    "params": []
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "getOrbit",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#getOrbit",
    "access": "public",
    "description": "Gets the {Orbit} object for this SpaceObject.",
    "lineNumber": 486,
    "return": {
      "nullable": null,
      "types": [
        "Orbit"
      ],
      "spread": false,
      "description": "Orbit object"
    },
    "params": []
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "getLabelVisibility",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#getLabelVisibility",
    "access": "public",
    "description": "Gets label visilibity status.",
    "lineNumber": 494,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether label is visible."
    },
    "params": []
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "setLabelVisibility",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#setLabelVisibility",
    "access": "public",
    "description": "Toggle the visilibity of the label.",
    "lineNumber": 502,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "Whether to show or hide."
      }
    ],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "getId",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#getId",
    "access": "public",
    "description": "Gets the unique ID of this object.",
    "lineNumber": 516,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Unique ID"
    },
    "params": []
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "isStaticObject",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#isStaticObject",
    "access": "public",
    "description": "Determines whether object is static (can't change its position) or whether\nits position can be updated (ie, it has ephemeris)",
    "lineNumber": 525,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether this object can change its position."
    },
    "params": []
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "isReady",
    "memberof": "src/SpaceObject.js~SpaceObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SpaceObject.js~SpaceObject#isReady",
    "access": "public",
    "description": "Determines whether object is ready to be measured or added to scene.",
    "lineNumber": 533,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if ready"
    },
    "params": []
  },
  {
    "__docId__": 373,
    "kind": "variable",
    "name": "DEFAULT_PLANET_TEXTURE_URL",
    "memberof": "src/SpaceObject.js",
    "static": true,
    "longname": "src/SpaceObject.js~DEFAULT_PLANET_TEXTURE_URL",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/SpaceObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 538,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 374,
    "kind": "variable",
    "name": "SpaceObjectPresets",
    "memberof": "src/SpaceObject.js",
    "static": true,
    "longname": "src/SpaceObject.js~SpaceObjectPresets",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/SpaceObject.js",
    "importStyle": "{SpaceObjectPresets}",
    "description": "Useful presets for creating SpaceObjects.",
    "examples": [
      "const myobject = viz.addObject('planet1', Spacekit.SpaceObjectPresets.MERCURY);"
    ],
    "lineNumber": 545,
    "type": {
      "types": [
        "{\"SUN\": *, \"MERCURY\": *, \"VENUS\": *, \"EARTH\": *, \"MOON\": *, \"MARS\": *, \"JUPITER\": *, \"SATURN\": *, \"URANUS\": *, \"NEPTUNE\": *, \"PLUTO\": *}"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "file",
    "name": "src/SphereObject.js",
    "content": "import * as THREE from 'three';\n//import { TranslucentShader } from 'three/examples/jsm/shaders/TranslucentShader.js';\n\nimport { RotatingObject } from './RotatingObject';\nimport { rescaleNumber } from './Scale';\nimport { auToKm, kmToAu, rad } from './Units';\nimport {\n  ATMOSPHERE_SHADER_VERTEX,\n  ATMOSPHERE_SHADER_FRAGMENT,\n  RING_SHADER_VERTEX,\n  RING_SHADER_FRAGMENT,\n  SPHERE_SHADER_VERTEX,\n  SPHERE_SHADER_FRAGMENT,\n} from './shaders';\n\n/**\n * Simulates a planet or other object as a perfect sphere.\n */\nexport class SphereObject extends RotatingObject {\n  /**\n   * @param {String} options.textureUrl Path to basic texture (optional)\n   * @param {String} options.bumpMapUrl Path to bump map (optional)\n   * @param {String} options.specularMapUrl Path to specular map (optional)\n   * @param {Number} options.color Hex color of the sphere\n   * @param {Number} options.axialTilt Axial tilt in degrees\n   * @param {Number} options.radius Radius of sphere. Defaults to 1\n   * @param {Object} options.levelsOfDetail List of {threshold: x, segments:\n   * y}, where `threshold` is radii distance and `segments` is the number\n   * number of sphere faces to render.\n   * @param {Object} options.atmosphere Atmosphere options\n   * @param {Object} options.atmosphere.enable Show atmosphere\n   * @param {Object} options.atmosphere.color Atmosphere color\n   * @param {Object} options.atmosphere.innerSizeRatio Size ratio of the inner\n   * atmosphere to the radius of the sphere. Defaults to 0.025\n   * @param {Object} options.atmosphere.outerSizeRatio Size ratio of the outer\n   * atmosphere to the radius of the sphere. Defaults to 0.15\n   * @param {Object} options.debug Debug options\n   * @param {boolean} options.debug.showAxes Show axes\n   * @see SpaceObject\n   * @see RotatingObject\n   */\n  constructor(id, options, contextOrSimulation) {\n    super(id, options, contextOrSimulation, false /* autoInit */);\n\n    this.init();\n  }\n\n  init() {\n    let map;\n    if (this._options.textureUrl) {\n      map = new THREE.TextureLoader().load(this._options.textureUrl);\n    }\n\n    const detailedObj = new THREE.LOD();\n    const levelsOfDetail = this._options.levelsOfDetail || [\n      { radii: 0, segments: 64 },\n    ];\n    const radius = this.getScaledRadius();\n\n    for (let i = 0; i < levelsOfDetail.length; i += 1) {\n      const level = levelsOfDetail[i];\n      const sphereGeometry = new THREE.SphereGeometry(\n        radius,\n        level.segments,\n        level.segments,\n      );\n      const color = this._options.color || 0xbbbbbb;\n\n      let material;\n      if (this._simulation.isUsingLightSources()) {\n        const uniforms = {\n          sphereTexture: { value: null },\n          lightPos: { value: new THREE.Vector3() },\n        };\n        // TODO(ian): Handle if no map\n        uniforms.sphereTexture.value = map;\n        uniforms.lightPos.value.copy(this._simulation.getLightPosition());\n        material = new THREE.ShaderMaterial({\n          uniforms,\n          vertexShader: SPHERE_SHADER_VERTEX,\n          fragmentShader: SPHERE_SHADER_FRAGMENT,\n          transparent: true,\n        });\n      } else {\n        material = new THREE.MeshBasicMaterial({\n          map,\n          color,\n        });\n      }\n\n      const mesh = new THREE.Mesh(sphereGeometry, material);\n      mesh.receiveShadow = true;\n      mesh.castShadow = true;\n\n      // Change the coordinate system to have Z-axis pointed up.\n      mesh.rotation.x = Math.PI / 2;\n\n      // Show this number of segments at distance >= radii * level.radii.\n      detailedObj.addLevel(mesh, radius * level.radii);\n    }\n\n    // Add to the parent base object.\n    this._obj.add(detailedObj);\n\n    if (this._options.atmosphere && this._options.atmosphere.enable) {\n      const atmosphere = this.renderFullAtmosphere();\n      if (atmosphere) {\n        this._obj.add(atmosphere);\n      }\n    }\n\n    if (this._options.axialTilt) {\n      this._obj.rotation.y += rad(this._options.axialTilt);\n    }\n\n    this._renderMethod = 'SPHERE';\n\n    if (this._simulation) {\n      // Add it all to visualization.\n      this._simulation.addObject(this, false /* noUpdate */);\n    }\n\n    super.init();\n  }\n\n  /**\n   * @private\n   */\n  getScaledRadius() {\n    return rescaleNumber(this._options.radius || 1);\n  }\n\n  /**\n   * @private\n   * Model the atmosphere as two layers - a thick inner layer and a diffuse\n   * outer one.\n   */\n  renderFullAtmosphere() {\n    if (!this._simulation.isUsingLightSources()) {\n      console.warn('Cannot render atmosphere without a light source');\n      return null;\n    }\n\n    const radius = this.getScaledRadius();\n    const color = new THREE.Color(this._options.atmosphere.color || 0xffffff);\n\n    const innerSize =\n      radius * (this._options.atmosphere.innerSizeRatio || 0.025);\n    const outerSize =\n      radius * (this._options.atmosphere.outerSizeRatio || 0.15);\n\n    const detailedObj = new THREE.Object3D();\n    detailedObj.add(\n      this.renderAtmosphereComponent(radius, innerSize, 0.8, 2.0, color),\n    );\n    detailedObj.add(\n      this.renderAtmosphereComponent(radius, outerSize, 0.5, 4.0, color),\n    );\n\n    // Hide atmosphere beyond some multiple of radius distance.\n    // TODO(ian): This effect is somewhat jarring when the atmosphere first\n    // appears, also arbitrary...\n    const ret = new THREE.LOD();\n    ret.addLevel(detailedObj, 0);\n    ret.addLevel(new THREE.Object3D(), radius * 24);\n    return ret;\n  }\n\n  /**\n   * @private\n   * @param {THREE.Color} color Color of atmosphere\n   */\n  renderAtmosphereComponent(radius, size, coefficient, power, color) {\n    const geometry = new THREE.SphereGeometry(radius + size, 32, 32);\n    const uniforms = {\n      c: { value: coefficient },\n      p: { value: power },\n      color: { value: color },\n      lightPos: { value: new THREE.Vector3() },\n    };\n    uniforms.lightPos.value.copy(this._simulation.getLightPosition());\n\n    const material = new THREE.ShaderMaterial({\n      uniforms,\n      vertexShader: ATMOSPHERE_SHADER_VERTEX,\n      fragmentShader: ATMOSPHERE_SHADER_FRAGMENT,\n      side: THREE.BackSide,\n      transparent: true,\n      depthWrite: false,\n    });\n\n    const mesh = new THREE.Mesh(geometry, material);\n    return mesh;\n  }\n\n  /**\n   * Add rings around this object.\n   * @param {Number} innerRadiusKm Inner radius of ring.\n   * @param {Number} outerRadiusKm Outer radius of ring.\n   * @param {String} texturePath Full path to 1xN ring texture. (each pixel\n   * represents the color of a full circle within the ring)\n   * @param {Number} segments  Number of segments to use to render ring.\n   * (optional)\n   */\n  addRings(innerRadiusKm, outerRadiusKm, texturePath, segments = 128) {\n    const radius = this.getScaledRadius();\n\n    const innerRadiusSize = rescaleNumber(kmToAu(innerRadiusKm));\n    const outerRadiusSize = rescaleNumber(kmToAu(outerRadiusKm));\n\n    const geometry = new THREE.RingGeometry(\n      innerRadiusSize,\n      outerRadiusSize,\n      segments,\n      5,\n      0,\n      Math.PI * 2,\n    );\n    // TODO(ian): Load from base path.\n    const map = new THREE.TextureLoader().load(texturePath);\n\n    let material;\n    if (this._simulation.isUsingLightSources()) {\n      // TODO(ian): Follow recommendation for defining ShaderMaterials here:\n      // https://discourse.threejs.org/t/cant-get-a-sampler2d-uniform-to-work-from-datatexture/6366/14?u=ianw\n      const uniforms = THREE.UniformsUtils.merge([\n        THREE.UniformsLib.ambient,\n        THREE.UniformsLib.lights,\n        THREE.UniformsLib.shadowmap,\n        {\n          ringTexture: { value: null },\n          innerRadius: { value: innerRadiusSize },\n          outerRadius: { value: outerRadiusSize },\n          lightPos: { value: new THREE.Vector3() },\n        },\n      ]);\n      uniforms.ringTexture.value = map;\n      uniforms.lightPos.value.copy(this._simulation.getLightPosition());\n\n      material = new THREE.ShaderMaterial({\n        uniforms,\n        lights: true,\n        vertexShader: RING_SHADER_VERTEX,\n        fragmentShader: RING_SHADER_FRAGMENT,\n        transparent: true,\n        alphaTest: 0.1,\n        side: THREE.DoubleSide,\n      });\n    } else {\n      material = new THREE.MeshBasicMaterial({\n        map,\n        side: THREE.DoubleSide,\n        transparent: true,\n        alphaTest: 0.1,\n        opacity: 0.8,\n      });\n    }\n\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.receiveShadow = true;\n    mesh.castShadow = true;\n\n    this._obj.add(mesh);\n  }\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/SphereObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 376,
    "kind": "class",
    "name": "SphereObject",
    "memberof": "src/SphereObject.js",
    "static": true,
    "longname": "src/SphereObject.js~SphereObject",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/SphereObject.js",
    "importStyle": "{SphereObject}",
    "description": "Simulates a planet or other object as a perfect sphere.",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "src/RotatingObject.js~RotatingObject"
    ]
  },
  {
    "__docId__": 377,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/SphereObject.js~SphereObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SphereObject.js~SphereObject#constructor",
    "access": "public",
    "description": "",
    "see": [
      "SpaceObject",
      "RotatingObject"
    ],
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.textureUrl",
        "description": "Path to basic texture (optional)"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.bumpMapUrl",
        "description": "Path to bump map (optional)"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.specularMapUrl",
        "description": "Path to specular map (optional)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.color",
        "description": "Hex color of the sphere"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.axialTilt",
        "description": "Axial tilt in degrees"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.radius",
        "description": "Radius of sphere. Defaults to 1"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.levelsOfDetail",
        "description": "List of {threshold: x, segments:\ny}, where `threshold` is radii distance and `segments` is the number\nnumber of sphere faces to render."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.atmosphere",
        "description": "Atmosphere options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.atmosphere.enable",
        "description": "Show atmosphere"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.atmosphere.color",
        "description": "Atmosphere color"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.atmosphere.innerSizeRatio",
        "description": "Size ratio of the inner\natmosphere to the radius of the sphere. Defaults to 0.025"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.atmosphere.outerSizeRatio",
        "description": "Size ratio of the outer\natmosphere to the radius of the sphere. Defaults to 0.15"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.debug",
        "description": "Debug options"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.debug.showAxes",
        "description": "Show axes"
      }
    ]
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "init",
    "memberof": "src/SphereObject.js~SphereObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SphereObject.js~SphereObject#init",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 379,
    "kind": "member",
    "name": "_renderMethod",
    "memberof": "src/SphereObject.js~SphereObject",
    "static": false,
    "longname": "src/SphereObject.js~SphereObject#_renderMethod",
    "access": "private",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "getScaledRadius",
    "memberof": "src/SphereObject.js~SphereObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SphereObject.js~SphereObject#getScaledRadius",
    "access": "private",
    "description": "",
    "lineNumber": 129,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "renderFullAtmosphere",
    "memberof": "src/SphereObject.js~SphereObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SphereObject.js~SphereObject#renderFullAtmosphere",
    "access": "private",
    "description": "",
    "lineNumber": 138,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "renderAtmosphereComponent",
    "memberof": "src/SphereObject.js~SphereObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SphereObject.js~SphereObject#renderAtmosphereComponent",
    "access": "private",
    "description": "",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "THREE.Color"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Color of atmosphere"
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "addRings",
    "memberof": "src/SphereObject.js~SphereObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SphereObject.js~SphereObject#addRings",
    "access": "public",
    "description": "Add rings around this object.",
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "innerRadiusKm",
        "description": "Inner radius of ring."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "outerRadiusKm",
        "description": "Outer radius of ring."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "texturePath",
        "description": "Full path to 1xN ring texture. (each pixel\nrepresents the color of a full circle within the ring)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "segments",
        "description": "Number of segments to use to render ring.\n(optional)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 384,
    "kind": "file",
    "name": "src/Stars.js",
    "content": "import * as THREE from 'three';\n\nimport { STAR_SHADER_VERTEX, STAR_SHADER_FRAGMENT } from './shaders';\nimport { getFullUrl, getThreeJsTexture } from './util';\nimport {\n  rad,\n  hoursToDeg,\n  sexagesimalToDecimalRa,\n  sexagesimalToDecimalDec,\n} from './Units';\nimport {\n  sphericalToCartesian,\n  equatorialToEcliptic_Cartesian,\n  getObliquity,\n} from './Coordinates';\n\nconst GALACTIC_CENTER_RA = sexagesimalToDecimalRa(17, 45, 40.04);\nconst GALACTIC_CENTER_DEC = sexagesimalToDecimalDec(-29, 0, 28.1);\n\n/**\n * Maps spectral class to star color\n * @param temp {Number} Star temperature in Kelvin\n * @return {Number} Color for star of given spectral class\n */\nfunction getColorForStar(temp) {\n  if (temp >= 30000) return 0x92b5ff;\n  if (temp >= 10000) return 0xa2c0ff;\n  if (temp >= 7500) return 0xd5e0ff;\n  if (temp >= 6000) return 0xf9f5ff;\n  if (temp >= 5200) return 0xffede3;\n  if (temp >= 3700) return 0xffdab5;\n  if (temp >= 2400) return 0xffb56c;\n  return 0xffb56c;\n}\n\n/**\n * Returns the pixel size of a star.\n * @param mag {Number} Absolute magnitude of star\n * @param minSize {Number} Pixel size of the smallest star\n * @return {Number} Pixel size of star.\n */\nfunction getSizeForStar(mag, minSize) {\n  if (mag < 2.0) return minSize * 4;\n  if (mag < 4.0) return minSize * 2;\n  if (mag < 6.0) return minSize;\n  return 1;\n}\n\n/**\n * Builds a starry background that is accurate for the Earth's position in\n * space.\n */\nexport class Stars {\n  /**\n   * @param {Number} options.minSize The size of the smallest star.\n   * Defaults to 0.75\n   */\n  constructor(options, contextOrSimulation) {\n    this._options = options;\n    this._id = `__stars_${new Date().getTime()}`;\n\n    // if (contextOrSimulation instanceOf Simulation) {\n    if (true) {\n      // User passed in Simulation\n      this._simulation = contextOrSimulation;\n      this._context = contextOrSimulation.getContext();\n    } else {\n      // User just passed in options\n      this._simulation = null;\n      this._context = contextOrSimulation;\n    }\n\n    this._stars = undefined;\n\n    this.init();\n  }\n\n  init() {\n    const dataUrl = getFullUrl(\n      '{{data}}/processed/bsc.json',\n      this._context.options.basePath,\n    );\n\n    fetch(dataUrl)\n      .then(resp => resp.json())\n      .then(library => {\n        const n = library.length;\n\n        const geometry = new THREE.BufferGeometry();\n\n        const positions = new Float32Array(n * 3);\n        const colors = new Float32Array(n * 3);\n        const sizes = new Float32Array(n);\n\n        geometry.addAttribute(\n          'position',\n          new THREE.BufferAttribute(positions, 3),\n        );\n        geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3));\n        geometry.addAttribute('size', new THREE.BufferAttribute(sizes, 1));\n\n        library.forEach((star, idx) => {\n          const [ra, dec, temp, mag] = star;\n\n          const raRad = rad(hoursToDeg(ra));\n          const decRad = rad(dec);\n\n          const cartesianSpherical = sphericalToCartesian(raRad, decRad, 1e9);\n          const pos = equatorialToEcliptic_Cartesian(\n            cartesianSpherical[0],\n            cartesianSpherical[1],\n            cartesianSpherical[2],\n            getObliquity(), // defaults to J2000 value\n          );\n\n          positions.set(pos, idx * 3);\n\n          const color = new THREE.Color(getColorForStar(temp));\n          colors.set(color.toArray(), idx * 3);\n\n          sizes[idx] = getSizeForStar(\n            mag,\n            this._options.minSize || 3.0 /* minSize */,\n          );\n        });\n\n        const material = new THREE.ShaderMaterial({\n          uniforms: {},\n          vertexColors: THREE.VertexColors,\n          vertexShader: STAR_SHADER_VERTEX,\n          fragmentShader: STAR_SHADER_FRAGMENT,\n\n          transparent: true,\n        });\n\n        this._stars = new THREE.Points(geometry, material);\n\n        if (this._simulation) {\n          this._simulation.addObject(this, true /* noUpdate */);\n        }\n      });\n  }\n\n  /**\n   * A list of THREE.js objects that are used to compose the skybox.\n   * @return {THREE.Object} Skybox mesh\n   */\n  get3jsObjects() {\n    return [this._stars];\n  }\n\n  /**\n   * Get the unique ID of this object.\n   * @return {String} id\n   */\n  getId() {\n    return this._id;\n  }\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/Stars.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 385,
    "kind": "variable",
    "name": "GALACTIC_CENTER_RA",
    "memberof": "src/Stars.js",
    "static": true,
    "longname": "src/Stars.js~GALACTIC_CENTER_RA",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Stars.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 386,
    "kind": "variable",
    "name": "GALACTIC_CENTER_DEC",
    "memberof": "src/Stars.js",
    "static": true,
    "longname": "src/Stars.js~GALACTIC_CENTER_DEC",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Stars.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 387,
    "kind": "function",
    "name": "getColorForStar",
    "memberof": "src/Stars.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Stars.js~getColorForStar",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Stars.js",
    "importStyle": null,
    "description": "Maps spectral class to star color",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "temp",
        "description": "{Number} Star temperature in Kelvin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Color for star of given spectral class"
    },
    "ignore": true
  },
  {
    "__docId__": 388,
    "kind": "function",
    "name": "getSizeForStar",
    "memberof": "src/Stars.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Stars.js~getSizeForStar",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/Stars.js",
    "importStyle": null,
    "description": "Returns the pixel size of a star.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mag",
        "description": "{Number} Absolute magnitude of star"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "minSize",
        "description": "{Number} Pixel size of the smallest star"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Pixel size of star."
    },
    "ignore": true
  },
  {
    "__docId__": 389,
    "kind": "class",
    "name": "Stars",
    "memberof": "src/Stars.js",
    "static": true,
    "longname": "src/Stars.js~Stars",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Stars.js",
    "importStyle": "{Stars}",
    "description": "Builds a starry background that is accurate for the Earth's position in\nspace.",
    "lineNumber": 53,
    "interface": false
  },
  {
    "__docId__": 390,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Stars.js~Stars",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stars.js~Stars#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.minSize",
        "description": "The size of the smallest star.\nDefaults to 0.75"
      }
    ]
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "_options",
    "memberof": "src/Stars.js~Stars",
    "static": false,
    "longname": "src/Stars.js~Stars#_options",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "_id",
    "memberof": "src/Stars.js~Stars",
    "static": false,
    "longname": "src/Stars.js~Stars#_id",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "_simulation",
    "memberof": "src/Stars.js~Stars",
    "static": false,
    "longname": "src/Stars.js~Stars#_simulation",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "_context",
    "memberof": "src/Stars.js~Stars",
    "static": false,
    "longname": "src/Stars.js~Stars#_context",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "_stars",
    "memberof": "src/Stars.js~Stars",
    "static": false,
    "longname": "src/Stars.js~Stars#_stars",
    "access": "private",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "init",
    "memberof": "src/Stars.js~Stars",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stars.js~Stars#init",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "get3jsObjects",
    "memberof": "src/Stars.js~Stars",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stars.js~Stars#get3jsObjects",
    "access": "public",
    "description": "A list of THREE.js objects that are used to compose the skybox.",
    "lineNumber": 148,
    "return": {
      "nullable": null,
      "types": [
        "THREE.Object"
      ],
      "spread": false,
      "description": "Skybox mesh"
    },
    "params": []
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "getId",
    "memberof": "src/Stars.js~Stars",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stars.js~Stars#getId",
    "access": "public",
    "description": "Get the unique ID of this object.",
    "lineNumber": 156,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "id"
    },
    "params": []
  },
  {
    "__docId__": 402,
    "kind": "file",
    "name": "src/StaticParticles.js",
    "content": "import * as THREE from 'three';\n\nimport {\n  STAR_SHADER_VERTEX,\n  STAR_SHADER_FRAGMENT,\n} from './shaders';\n\nconst DEFAULT_PARTICLE_SIZE = 4;\nconst DEFAULT_COLOR = 0xffffff;\n\n/**\n * Simulates a static particle field in whichever base reference the simulation is in.\n */\nexport class StaticParticles {\n  /**\n   *\n   * @param {String} id Unique ID for this object\n   * @param {Array.Array.<Number>} points an array of X,Y,Z cartesian points, one for each particle\n   * @param {Object} options container\n   * @param {Color} options.defaultColor color to use for all particles can be a THREE string color name or hex value\n   * @param {Number} options.size the size of each particle\n   * @param {Object} contextOrSimulation Simulation context or simulation object\n   */\n  constructor(id, points, options, contextOrSimulation) {\n    this._options = options;\n\n    this._id = id;\n\n    // TODO(ian): Add to ctx\n    if (true) {\n      // User passed in Simulation\n      this._simulation = contextOrSimulation;\n      this._context = contextOrSimulation.getContext();\n    } else {\n      // User just passed in options\n      this._simulation = null;\n      this._context = contextOrSimulation;\n    }\n\n    // Number of particles in the scene.\n    this._particleCount = points.length;\n\n    this._points = points;\n    this._geometry = undefined;\n\n    this.init();\n    this._simulation.addObject(this, true);\n  }\n\n  init() {\n    const positions = new Float32Array(this._points.length * 3);\n    const colors = new Float32Array(this._points.length * 3);\n    const sizes = new Float32Array(this._points.length);\n    let color = new THREE.Color(DEFAULT_COLOR);\n\n    if (this._options.defaultColor) {\n      color = new THREE.Color(this._options.defaultColor);\n    }\n\n    let size = DEFAULT_PARTICLE_SIZE;\n\n    if (this._options.size) {\n      size = this._options.size;\n    }\n\n    for (let i = 0, l = this._points.length; i < l; i++) {\n      const vertex = this._points[i];\n      positions.set(vertex, i * 3);\n      color.toArray(colors, i * 3);\n      sizes[i] = size;\n    }\n\n    const geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n    geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3));\n    geometry.addAttribute('size', new THREE.BufferAttribute(sizes, 1));\n\n    const material = new THREE.ShaderMaterial({\n      vertexColors: THREE.VertexColors,\n      vertexShader: STAR_SHADER_VERTEX,\n      fragmentShader: STAR_SHADER_FRAGMENT,\n      transparent: true,\n    });\n\n    this._geometry = new THREE.Points(geometry, material);\n  }\n\n  /**\n   * A list of THREE.js objects that are used to compose the skybox.\n   * @return {THREE.Object} Skybox mesh\n   */\n  get3jsObjects() {\n    return [this._geometry];\n  }\n\n  /**\n   * Get the unique ID of this object.\n   * @return {String} id\n   */\n  getId() {\n    return this._id;\n  }\n}",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/StaticParticles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 403,
    "kind": "variable",
    "name": "DEFAULT_PARTICLE_SIZE",
    "memberof": "src/StaticParticles.js",
    "static": true,
    "longname": "src/StaticParticles.js~DEFAULT_PARTICLE_SIZE",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/StaticParticles.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 404,
    "kind": "variable",
    "name": "DEFAULT_COLOR",
    "memberof": "src/StaticParticles.js",
    "static": true,
    "longname": "src/StaticParticles.js~DEFAULT_COLOR",
    "access": "public",
    "export": false,
    "importPath": "spacekit/src/StaticParticles.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 405,
    "kind": "class",
    "name": "StaticParticles",
    "memberof": "src/StaticParticles.js",
    "static": true,
    "longname": "src/StaticParticles.js~StaticParticles",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/StaticParticles.js",
    "importStyle": "{StaticParticles}",
    "description": "Simulates a static particle field in whichever base reference the simulation is in.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 406,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/StaticParticles.js~StaticParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/StaticParticles.js~StaticParticles#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Unique ID for this object"
      },
      {
        "nullable": null,
        "types": [
          "Array.Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "points",
        "description": "an array of X,Y,Z cartesian points, one for each particle"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "container"
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "options.defaultColor",
        "description": "color to use for all particles can be a THREE string color name or hex value"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.size",
        "description": "the size of each particle"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "contextOrSimulation",
        "description": "Simulation context or simulation object"
      }
    ]
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "_options",
    "memberof": "src/StaticParticles.js~StaticParticles",
    "static": false,
    "longname": "src/StaticParticles.js~StaticParticles#_options",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "_id",
    "memberof": "src/StaticParticles.js~StaticParticles",
    "static": false,
    "longname": "src/StaticParticles.js~StaticParticles#_id",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "_simulation",
    "memberof": "src/StaticParticles.js~StaticParticles",
    "static": false,
    "longname": "src/StaticParticles.js~StaticParticles#_simulation",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "_context",
    "memberof": "src/StaticParticles.js~StaticParticles",
    "static": false,
    "longname": "src/StaticParticles.js~StaticParticles#_context",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "_particleCount",
    "memberof": "src/StaticParticles.js~StaticParticles",
    "static": false,
    "longname": "src/StaticParticles.js~StaticParticles#_particleCount",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "_points",
    "memberof": "src/StaticParticles.js~StaticParticles",
    "static": false,
    "longname": "src/StaticParticles.js~StaticParticles#_points",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "_geometry",
    "memberof": "src/StaticParticles.js~StaticParticles",
    "static": false,
    "longname": "src/StaticParticles.js~StaticParticles#_geometry",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "init",
    "memberof": "src/StaticParticles.js~StaticParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/StaticParticles.js~StaticParticles#init",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "get3jsObjects",
    "memberof": "src/StaticParticles.js~StaticParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/StaticParticles.js~StaticParticles#get3jsObjects",
    "access": "public",
    "description": "A list of THREE.js objects that are used to compose the skybox.",
    "lineNumber": 92,
    "return": {
      "nullable": null,
      "types": [
        "THREE.Object"
      ],
      "spread": false,
      "description": "Skybox mesh"
    },
    "params": []
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "getId",
    "memberof": "src/StaticParticles.js~StaticParticles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/StaticParticles.js~StaticParticles#getId",
    "access": "public",
    "description": "Get the unique ID of this object.",
    "lineNumber": 100,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "id"
    },
    "params": []
  },
  {
    "__docId__": 420,
    "kind": "file",
    "name": "src/Units.js",
    "content": "export function rad(val) {\n  return (val * Math.PI) / 180;\n}\n\nexport function deg(val) {\n  return (val * 180) / Math.PI;\n}\n\nexport function hoursToDeg(val) {\n  return val * 15.0;\n}\n\nexport function sexagesimalToDecimalRa(raHour, raMin, raSec) {\n  // https://astronomy.stackexchange.com/questions/24518/convert-a-decimal-into-ra-or-dec\n  return raHour * 15.0 + raMin / 4.0 + raSec / 240.0;\n}\n\nexport function sexagesimalToDecimalDec(\n  decDeg,\n  decMin,\n  decSec,\n  isObserverBelowEquator = false,\n) {\n  const posneg = isObserverBelowEquator ? -1 : 1;\n  return decDeg + decMin / 60.0 + (posneg * decSec) / 3600.0;\n}\n\nexport function decimalToSexagesimalRa(decimal) {\n  const val = parseFloat(decimal);\n  const raHour = Math.trunc(val / 15.0);\n  const raMin = Math.trunc((val - raHour * 15.0) * 4.0);\n  const raSec = (val - raHour * 15.0 - raMin / 4.0) * 240.0;\n  return [raHour, raMin, raSec];\n}\n\nexport function decimalToSexagesimalDec(\n  decimal,\n  isObserverBelowEquator = false,\n) {\n  const val = parseFloat(decimal);\n  const posneg = isObserverBelowEquator ? -1 : 1;\n\n  const decDeg = Math.trunc(val);\n  const decMin = Math.trunc((val - posneg * decDeg) * 60.0 * posneg);\n  const decSec =\n    (val - posneg * decDeg - (posneg * decMin) / 60.0) * 3600.0 * posneg;\n  return [decDeg, decMin, decSec];\n}\n\nexport function kmToAu(km) {\n  return km / 149597870.7;\n}\n\nexport function auToKm(au) {\n  return au * 149597870.7;\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/Units.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 421,
    "kind": "function",
    "name": "rad",
    "memberof": "src/Units.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Units.js~rad",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Units.js",
    "importStyle": "{rad}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "function",
    "name": "deg",
    "memberof": "src/Units.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Units.js~deg",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Units.js",
    "importStyle": "{deg}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "function",
    "name": "hoursToDeg",
    "memberof": "src/Units.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Units.js~hoursToDeg",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Units.js",
    "importStyle": "{hoursToDeg}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "function",
    "name": "sexagesimalToDecimalRa",
    "memberof": "src/Units.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Units.js~sexagesimalToDecimalRa",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Units.js",
    "importStyle": "{sexagesimalToDecimalRa}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "raHour",
        "types": [
          "*"
        ]
      },
      {
        "name": "raMin",
        "types": [
          "*"
        ]
      },
      {
        "name": "raSec",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "function",
    "name": "sexagesimalToDecimalDec",
    "memberof": "src/Units.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Units.js~sexagesimalToDecimalDec",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Units.js",
    "importStyle": "{sexagesimalToDecimalDec}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "decDeg",
        "types": [
          "*"
        ]
      },
      {
        "name": "decMin",
        "types": [
          "*"
        ]
      },
      {
        "name": "decSec",
        "types": [
          "*"
        ]
      },
      {
        "name": "isObserverBelowEquator",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "function",
    "name": "decimalToSexagesimalRa",
    "memberof": "src/Units.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Units.js~decimalToSexagesimalRa",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Units.js",
    "importStyle": "{decimalToSexagesimalRa}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "decimal",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "function",
    "name": "decimalToSexagesimalDec",
    "memberof": "src/Units.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Units.js~decimalToSexagesimalDec",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Units.js",
    "importStyle": "{decimalToSexagesimalDec}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "decimal",
        "types": [
          "*"
        ]
      },
      {
        "name": "isObserverBelowEquator",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "function",
    "name": "kmToAu",
    "memberof": "src/Units.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Units.js~kmToAu",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Units.js",
    "importStyle": "{kmToAu}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "km",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "function",
    "name": "auToKm",
    "memberof": "src/Units.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Units.js~auToKm",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/Units.js",
    "importStyle": "{auToKm}",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "au",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "file",
    "name": "src/shaders.js",
    "content": "import * as THREE from 'three';\n\nimport { getScaleFactor } from './Scale';\n\n/**\n * @ignore\n */\nexport function getOrbitShaderFragment() {\n  return `\n    varying vec3 vColor;\n    uniform sampler2D texture;\n\n    void main() {\n      gl_FragColor = vec4(vColor, 1.0) * texture2D(texture, gl_PointCoord);\n    }\n  `;\n}\n\n/**\n * @ignore\n */\nexport function getOrbitShaderVertex() {\n  return `\n    attribute vec3 fuzzColor;\n    attribute vec3 origin;\n    varying vec3 vColor;\n\n    attribute float size;\n\n    attribute float a;\n    attribute float e;\n    attribute float i;\n    attribute float om;\n    attribute float wBar;\n    attribute float M;\n\n    // Perihelion distance\n    attribute float q;\n\n    // CPU-computed term for parabolic orbits\n    attribute float a0;\n\n    // COSH Function (Hyperbolic Cosine)\n    float cosh(float val) {\n      float tmp = exp(val);\n      float cosH = (tmp + 1.0 / tmp) / 2.0;\n      return cosH;\n    }\n\n    // TANH Function (Hyperbolic Tangent)\n    float tanh(float val) {\n      float tmp = exp(val);\n      float tanH = (tmp - 1.0 / tmp) / (tmp + 1.0 / tmp);\n      return tanH;\n    }\n\n    // SINH Function (Hyperbolic Sine)\n    float sinh(float val) {\n      float tmp = exp(val);\n      float sinH = (tmp - 1.0 / tmp) / 2.0;\n      return sinH;\n    }\n\n    // Cube root helper that assumes param is positive\n    float cbrt(float x) {\n      return exp(log(x) / 3.0);\n    }\n\n    vec3 getPosNearParabolic() {\n      // See https://stjarnhimlen.se/comp/ppcomp.html#17\n      float b = sqrt(1.0 + a0 * a0);\n      float W = cbrt(b + a0) - cbrt(b - a0);\n      float f = (1.0 - e) / (1.0 + e);\n\n      float a1 = 2.0 / 3.0 + (2.0 / 5.0) * W * W;\n      float a2 = 7.0 / 5.0 + (33.0 / 35.0) * W * W + (37.0 / 175.0) * pow(W, 4.0);\n      float a3 =\n        W * W * (432.0 / 175.0 + (956.0 / 1125.0) * W * W + (84.0 / 1575.0) * pow(W, 4.0));\n\n      float C = (W * W) / (1.0 + W * W);\n      float g = f * C * C;\n      float w = W * (1.0 + f * C * (a1 + a2 * g + a3 * g * g));\n\n      // True anomaly\n      float v = 2.0 * atan(w);\n      // Heliocentric distance\n      float r = (q * (1.0 + w * w)) / (1.0 + w * w * f);\n\n      // Compute heliocentric coords.\n      float i_rad = i;\n      float o_rad = om;\n      float p_rad = wBar;\n      float X = r * (cos(o_rad) * cos(v + p_rad - o_rad) - sin(o_rad) * sin(v + p_rad - o_rad) * cos(i_rad));\n      float Y = r * (sin(o_rad) * cos(v + p_rad - o_rad) + cos(o_rad) * sin(v + p_rad - o_rad) * cos(i_rad));\n      float Z = r * (sin(v + p_rad - o_rad) * sin(i_rad));\n      return vec3(X, Y, Z);\n    }\n\n    vec3 getPosHyperbolic() {\n      float F0 = M;\n      for (int count = 0; count < 100; count++) {\n        float F1 = (M + e * (F0 * cosh(F0) - sinh(F0))) / (e * cosh(F0) - 1.0);\n        float lastdiff = abs(F1 - F0);\n        F0 = F1;\n\n        if (lastdiff < 0.0000001) {\n          break;\n        }\n      }\n      float F = F0;\n\n      float v = 2.0 * atan(sqrt((e + 1.0) / (e - 1.0))) * tanh(F / 2.0);\n      float r = ${getScaleFactor().toFixed(\n        1,\n      )} * (a * (1.0 - e * e)) / (1.0 + e * cos(v));\n\n      // Compute heliocentric coords.\n      float i_rad = i;\n      float o_rad = om;\n      float p_rad = wBar;\n      float X = r * (cos(o_rad) * cos(v + p_rad - o_rad) - sin(o_rad) * sin(v + p_rad - o_rad) * cos(i_rad));\n      float Y = r * (sin(o_rad) * cos(v + p_rad - o_rad) + cos(o_rad) * sin(v + p_rad - o_rad) * cos(i_rad));\n      float Z = r * (sin(v + p_rad - o_rad) * sin(i_rad));\n      return vec3(X, Y, Z);\n    }\n\n    vec3 getPosEllipsoid() {\n      float i_rad = i;\n      float o_rad = om;\n      float p_rad = wBar;\n\n      // Estimate eccentric and true anom using iterative approximation (this\n      // is normally an intergral).\n      float E0 = M;\n      float E1 = M + e * sin(E0);\n      float lastdiff = abs(E1-E0);\n      E0 = E1;\n\n      for (int count = 0; count < 100; count++) {\n        E1 = M + e * sin(E0);\n        lastdiff = abs(E1-E0);\n        E0 = E1;\n        if (lastdiff < 0.0000001) {\n          break;\n        }\n      }\n\n      float E = E0;\n      float v = 2.0 * atan(sqrt((1.0+e)/(1.0-e)) * tan(E/2.0));\n\n      // Compute radius vector.\n      float r = ${getScaleFactor().toFixed(\n        1,\n      )} * a * (1.0 - e * e) / (1.0 + e * cos(v));\n\n      // Compute heliocentric coords.\n      float X = r * (cos(o_rad) * cos(v + p_rad - o_rad) - sin(o_rad) * sin(v + p_rad - o_rad) * cos(i_rad));\n      float Y = r * (sin(o_rad) * cos(v + p_rad - o_rad) + cos(o_rad) * sin(v + p_rad - o_rad) * cos(i_rad));\n      float Z = r * (sin(v + p_rad - o_rad) * sin(i_rad));\n      return vec3(X, Y, Z);\n    }\n\n    vec3 getPos() {\n      if (e > 0.8 && e < 1.2) {\n        return getPosNearParabolic();\n      } else if (e > 1.2) {\n        return getPosHyperbolic();\n      }\n      return getPosEllipsoid();\n    }\n\n    void main() {\n      vColor = fuzzColor;\n\n      vec3 newpos = getPos() + origin;\n      vec4 mvPosition = modelViewMatrix * vec4(newpos, 1.0);\n      gl_Position = projectionMatrix * mvPosition;\n      gl_PointSize = size;\n    }\n  `;\n}\n\nexport const STAR_SHADER_FRAGMENT = `\n    varying vec3 vColor;\n\n    void main() {\n      float a = 1.0 - 2.0 * length(gl_PointCoord - vec2(0.5, 0.5));\n      gl_FragColor = vec4(vColor, a);\n    }\n`;\n\nexport const STAR_SHADER_VERTEX = `\n    attribute float size;\n    varying vec3 vColor;\n\n    void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n        gl_PointSize = size;\n        gl_Position = projectionMatrix * mvPosition;\n    }\n`;\n\nexport const GENERIC_PARTICLE_SHADER_VERTEX = `\n    attribute float size;\n    attribute vec3 customColor;\n    varying vec3 vColor;\n    void main() {\n      vColor = customColor;\n      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n      gl_PointSize = size * (300.0 / -mvPosition.z);\n      gl_Position = projectionMatrix * mvPosition;\n    }\n`;\n\nexport const GENERIC_PARTICLE_SHADER_FRAGMENT = `\n    uniform vec3 color;\n    uniform sampler2D texture;\n    varying vec3 vColor;\n    void main() {\n      gl_FragColor = vec4(color * vColor, 1.0);\n      gl_FragColor = gl_FragColor * texture2D(texture, gl_PointCoord);\n      if (gl_FragColor.a < ALPHATEST) discard;\n    }\n`;\n\nexport const ATMOSPHERE_SHADER_VERTEX = `\n  uniform vec3 lightPos;\n\n  varying vec2 vUv;\n  varying vec3 vecPos;\n  varying vec3 vecNormal;\n  //varying vec3 vNormal;\n\n  varying vec3 vViewLightPos;\n\n  void main() {\n    //vNormal = normalize(normalMatrix * normal);\n    //gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n    vUv = uv;\n    // Since the light is in camera coordinates,\n    // I'll need the vertex position in camera coords too\n    vecPos = (modelViewMatrix * vec4(position, 1.0)).xyz;\n    // That's NOT exacly how you should transform your\n    // normals but this will work fine, since my model\n    // matrix is pretty basic\n    vecNormal = (modelViewMatrix * vec4(normal, 0.0)).xyz;\n    vViewLightPos = (viewMatrix * vec4(lightPos, 1.0)).xyz;\n    gl_Position = projectionMatrix * vec4(vecPos, 1.0);\n  }\n`;\n\n// With help from https://stackoverflow.com/questions/43621274/how-to-correctly-set-lighting-for-custom-shader-material\nexport const ATMOSPHERE_SHADER_FRAGMENT = `\n  uniform float c;\n  uniform float p;\n  uniform vec3 color;\n\n  varying vec2 vUv;\n  varying vec3 vecPos;\n  varying vec3 vecNormal;\n  varying vec3  vViewLightPos;\n\n  void main() {\n    float intensity = pow(c - dot(vecNormal, vec3(0.0, 0.0, 1.0)), p);\n\n    vec4 addedLights = vec4(0.0, 0.0, 0.0, 1.0);\n    vec3 lightDirection = normalize(vecPos - vViewLightPos);\n    addedLights.rgb += clamp(dot(-lightDirection, vecNormal), 0.0, 1.0)\n                       * 1.0 /* intensity */;\n                       // * pointLights[i].color\n\n    gl_FragColor = vec4(color, 1.0) * intensity * addedLights;\n  }\n`;\n\nexport const SPHERE_SHADER_VERTEX = `\n  uniform vec3 lightPos;\n\n  varying vec2 vUv;\n  varying vec3 vViewPosition;\n  varying vec3 vViewLightPos;\n  varying vec3 vNormal;\n\n  void main() {\n    vUv = uv;\n    vec4 vViewPosition4 = modelViewMatrix * vec4(position, 1.0);\n    vViewPosition = vViewPosition4.xyz;\n    vViewLightPos = (viewMatrix * vec4(lightPos, 1.0)).xyz;\n    vNormal = normalMatrix * normal;\n\n    gl_Position = projectionMatrix * vViewPosition4;\n  }\n`;\n\nexport const SPHERE_SHADER_FRAGMENT = `\n  uniform sampler2D sphereTexture;\n\n  varying vec2 vUv;\n  varying vec3 vNormal;\n  varying vec3 vViewPosition;\n  varying vec3 vViewLightPos;\n\n  void main() {\n    vec3 normal = normalize(vNormal);\n    vec3 lightDir = normalize(vViewLightPos - vViewPosition);\n    float lambertian = max(dot(normal, lightDir), 0.0);\n    gl_FragColor = texture2D(sphereTexture, vUv) * vec4(vec3(1.0) * lambertian, 1.0);\n  }\n`;\n\nexport const RING_SHADER_VERTEX = `\n  varying vec3 vPos;\n  varying vec3 vWorldPosition;\n  varying vec3 vNormal;\n\n  void main() {\n    vPos = position;\n    vec4 worldPosition = (modelMatrix * vec4(position, 1.));\n    gl_Position = projectionMatrix * viewMatrix * vec4(worldPosition.xyz, 1.);\n\n    vNormal = normalMatrix * normal;\n    vWorldPosition = worldPosition.xyz;\n  }\n`;\n\nexport const RING_SHADER_FRAGMENT = `\n  uniform sampler2D ringTexture;\n  uniform float innerRadius;\n  uniform float outerRadius;\n  uniform vec3 lightPos;\n\n  varying vec3 vNormal;\n  varying vec3 vPos;\n  varying vec3 vWorldPosition;\n\n  vec4 color() {\n    vec2 uv = vec2(0);\n    uv.x = (length(vPos) - innerRadius) / (outerRadius - innerRadius);\n    if (uv.x < 0.0 || uv.x > 1.0) {\n      discard;\n    }\n\n    vec4 pixel = texture2D(ringTexture, uv);\n    return pixel;\n  }\n\n  vec3 shadow() {\n    vec3 lightDir = normalize(vPos - lightPos);\n    vec3 planetPos = vec3(0);\n\n    vec3 ringPos = vPos - planetPos;\n    float posDotLightDir = dot(ringPos, lightDir);\n    float posDotLightDir2 = posDotLightDir * posDotLightDir;\n\n    // TODO(ian): Generalize this line.\n    float radius = 0.0389259903; // radius of saturn in coordinate system\n    float radius2 = radius * radius;\n\n    if (posDotLightDir > 0.0 && dot(ringPos, ringPos) - posDotLightDir2 < radius2) {\n      return vec3(0.0);\n    }\n    return vec3(1.0);\n  }\n\n  vec3 lights() {\n    vec3 lightDirection = normalize(vWorldPosition - lightPos);\n    float c = 0.35 + max(0.0, dot(vNormal, lightDirection)) * 0.4;\n\n    return vec3(c);\n  }\n\n  void main() {\n    // NOTE: The order of multiplication matters here. color() may call\n    // discard, which would cause problems on some Windows graphics drivers if\n    // it is a left operand.\n    // https://github.com/typpo/spacekit/issues/22\n    gl_FragColor = vec4(lights() * shadow(), 1.0) * color();\n  }\n`;\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/shaders.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 431,
    "kind": "function",
    "name": "getOrbitShaderFragment",
    "memberof": "src/shaders.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/shaders.js~getOrbitShaderFragment",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{getOrbitShaderFragment}",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "function",
    "name": "getOrbitShaderVertex",
    "memberof": "src/shaders.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/shaders.js~getOrbitShaderVertex",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{getOrbitShaderVertex}",
    "description": "",
    "lineNumber": 22,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "variable",
    "name": "STAR_SHADER_FRAGMENT",
    "memberof": "src/shaders.js",
    "static": true,
    "longname": "src/shaders.js~STAR_SHADER_FRAGMENT",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{STAR_SHADER_FRAGMENT}",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "variable",
    "name": "STAR_SHADER_VERTEX",
    "memberof": "src/shaders.js",
    "static": true,
    "longname": "src/shaders.js~STAR_SHADER_VERTEX",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{STAR_SHADER_VERTEX}",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "variable",
    "name": "GENERIC_PARTICLE_SHADER_VERTEX",
    "memberof": "src/shaders.js",
    "static": true,
    "longname": "src/shaders.js~GENERIC_PARTICLE_SHADER_VERTEX",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{GENERIC_PARTICLE_SHADER_VERTEX}",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "variable",
    "name": "GENERIC_PARTICLE_SHADER_FRAGMENT",
    "memberof": "src/shaders.js",
    "static": true,
    "longname": "src/shaders.js~GENERIC_PARTICLE_SHADER_FRAGMENT",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{GENERIC_PARTICLE_SHADER_FRAGMENT}",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "variable",
    "name": "ATMOSPHERE_SHADER_VERTEX",
    "memberof": "src/shaders.js",
    "static": true,
    "longname": "src/shaders.js~ATMOSPHERE_SHADER_VERTEX",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{ATMOSPHERE_SHADER_VERTEX}",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "variable",
    "name": "ATMOSPHERE_SHADER_FRAGMENT",
    "memberof": "src/shaders.js",
    "static": true,
    "longname": "src/shaders.js~ATMOSPHERE_SHADER_FRAGMENT",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{ATMOSPHERE_SHADER_FRAGMENT}",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "variable",
    "name": "SPHERE_SHADER_VERTEX",
    "memberof": "src/shaders.js",
    "static": true,
    "longname": "src/shaders.js~SPHERE_SHADER_VERTEX",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{SPHERE_SHADER_VERTEX}",
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "variable",
    "name": "SPHERE_SHADER_FRAGMENT",
    "memberof": "src/shaders.js",
    "static": true,
    "longname": "src/shaders.js~SPHERE_SHADER_FRAGMENT",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{SPHERE_SHADER_FRAGMENT}",
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "variable",
    "name": "RING_SHADER_VERTEX",
    "memberof": "src/shaders.js",
    "static": true,
    "longname": "src/shaders.js~RING_SHADER_VERTEX",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{RING_SHADER_VERTEX}",
    "description": null,
    "lineNumber": 313,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "variable",
    "name": "RING_SHADER_FRAGMENT",
    "memberof": "src/shaders.js",
    "static": true,
    "longname": "src/shaders.js~RING_SHADER_FRAGMENT",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/shaders.js",
    "importStyle": "{RING_SHADER_FRAGMENT}",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "file",
    "name": "src/spacekit.js",
    "content": "export * from './Camera';\nexport * from './Coordinates';\nexport * from './Ephem';\nexport * from './EphemPresets';\nexport * from './Orbit';\nexport * from './Simulation';\nexport * from './Skybox';\nexport * from './SpaceObject';\nexport * from './RotatingObject';\nexport * from './ShapeObject';\nexport * from './SphereObject';\nexport * from './StaticParticles';\nexport * from './KeplerParticles';\nexport * from './Stars';\nexport * from './Units';\n\nimport * as _THREE from 'three';\nexport const THREE = _THREE;\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/spacekit.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 444,
    "kind": "variable",
    "name": "THREE",
    "memberof": "src/spacekit.js",
    "static": true,
    "longname": "src/spacekit.js~THREE",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/spacekit.js",
    "importStyle": "{THREE}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "file",
    "name": "src/util.js",
    "content": "import * as THREE from 'three';\n\n/**\n * @ignore\n */\nexport const DEFAULT_TEXTURE_URL = '{{assets}}/sprites/fuzzyparticle.png';\n\n/**\n * Returns the complete URL to a texture given a basepath and a template url.\n * @param {String} template URL containing optional template parameters\n * @param {String} basePath Base path\n * @example\n * getFullUrl('{{assets}}/images/mysprite.png', '/path/to/assets')\n * => '/path/to/assets/images/mysprite.png'\n */\nexport function getFullUrl(template, basePath) {\n  return template\n    .replace('{{assets}}', `${basePath}/assets`)\n    .replace('{{data}}', `${basePath}/data`);\n}\n\n/**\n * Returns the complete URL to a texture given a basepath and a template url.\n * @param {String} template URL containing optional template parameters\n * @param {String} basePath Base path for simulation data and assets.\n * @example\n * getFullTextureUrl('{{assets}}/images/mysprite.png', '/path/to/assets')\n * => '/path/to/assets/images/mysprite.png'\n */\nexport function getFullTextureUrl(template, basePath) {\n  return getFullUrl(template || DEFAULT_TEXTURE_URL, basePath);\n}\n\n/*\n * Returns a THREE.js texture given a basepath and a template url.\n * @param {String} template URL containing optional template parameters\n * @param {String} basePath Base path for simulation data and assets.\n */\nexport function getThreeJsTexture(template, basePath) {\n  const fullTextureUrl = getFullTextureUrl(template, basePath);\n  return new THREE.TextureLoader().load(fullTextureUrl);\n}\n\nexport function getDefaultBasePath() {\n  return window.location.href.indexOf('localhost') > -1\n    ? '/src/'\n    : 'https://typpo.github.io/spacekit/src';\n}\n",
    "static": true,
    "longname": "/home/ian/code/spacekit/src/util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 446,
    "kind": "variable",
    "name": "DEFAULT_TEXTURE_URL",
    "memberof": "src/util.js",
    "static": true,
    "longname": "src/util.js~DEFAULT_TEXTURE_URL",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/util.js",
    "importStyle": "{DEFAULT_TEXTURE_URL}",
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "function",
    "name": "getFullUrl",
    "memberof": "src/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.js~getFullUrl",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/util.js",
    "importStyle": "{getFullUrl}",
    "description": "Returns the complete URL to a texture given a basepath and a template url.",
    "examples": [
      "getFullUrl('{{assets}}/images/mysprite.png', '/path/to/assets')\n=> '/path/to/assets/images/mysprite.png'"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": "URL containing optional template parameters"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "basePath",
        "description": "Base path"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "function",
    "name": "getFullTextureUrl",
    "memberof": "src/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.js~getFullTextureUrl",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/util.js",
    "importStyle": "{getFullTextureUrl}",
    "description": "Returns the complete URL to a texture given a basepath and a template url.",
    "examples": [
      "getFullTextureUrl('{{assets}}/images/mysprite.png', '/path/to/assets')\n=> '/path/to/assets/images/mysprite.png'"
    ],
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": "URL containing optional template parameters"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "basePath",
        "description": "Base path for simulation data and assets."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "function",
    "name": "getThreeJsTexture",
    "memberof": "src/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.js~getThreeJsTexture",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/util.js",
    "importStyle": "{getThreeJsTexture}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "template",
        "types": [
          "*"
        ]
      },
      {
        "name": "basePath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "function",
    "name": "getDefaultBasePath",
    "memberof": "src/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.js~getDefaultBasePath",
    "access": "public",
    "export": true,
    "importPath": "spacekit/src/util.js",
    "importStyle": "{getDefaultBasePath}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# spacekit\n\nSpacekit is a JavaScript library for creating interactive 3D space visualizations - whether of the Earth/moon system, solar system, or beyond.\n\nYou can check out an editable live example on [jsfiddle](https://jsfiddle.net/typpo/x9nv8jg0/6/), or look at a variety of live examples on [SpaceReference.org](https://www.spacereference.org/solar-system#ob=2001-einstein-1973-eb,7672-hawking-1995-uo2,2709-sagan-1982-fh).  This library generalizes work that is currently used on [Asterank](http://www.asterank.com/), [Meteor Showers](https://www.meteorshowers.org/), [Ancient Earth](http://dinosaurpictures.org/ancient-earth), [and](http://www.ianww.com/ceres/) [many](http://www.asterank.com/exoplanets) [other](http://www.ianww.com/pluto/) [things](http://www.ianww.com/moonviz/) into a single open-source 3D engine for space that is both accurate and visually stunning.\n\nSee the **[full documentation](https://typpo.github.io/spacekit/)**\n\nNote that this library is a work in progress and the API might change!\n\n[![spacekit examples](https://i.imgur.com/u48FCjJ.jpg)](https://typpo.github.io/spacekit/)\n\n# Terminology and components\n\n`Simulation`: the main container for your visualization.  A simulation is comprised by a `Camera` plus whatever you choose to put in it. See [documentation](https://typpo.github.io/spacekit/docs/class/src/Simulation.js~Simulation.html) for full options.\n```javascript\nconst sim = new Spacekit.Simulation(document.getElementById('my-container'), {\n // Required\n basePath: '../path/to/asset',\n // Optional\n camera: {\n   position: [0, -10, 5],\n   enableDrift: false,\n },\n debug: {\n   showAxes: false,\n   showGrid: false,\n   showStats: false,\n },\n});\n```\n\n`Skybox`: the image background of the visualization.  The \"universe\" of the visualization is contained within a large sphere, so \"skysphere\" may be a better (less conventional) way to describe it.  Some skybox assets are provided, including starry milky way background from ESA and NASA Tycho. See [documentation](https://typpo.github.io/spacekit/variable/index.html#static-variable-SkyboxPresets) for full preset options.\n```javascript\n// Use an existing skybox preset.\nconst skybox = sim.createSkybox(Spacekit.SkyboxPresets.NASA_TYCHO);\n\n// Add a skybox preset\nconst skybox = sim.createSkybox({\n  textureUrl: '../path/to/image.png'\n});\n```\n\n`Stars`: an alternative to a skybox.  Instead of showing an image, this class loads real star data and positions the stars accordingly in the simulation.  Usually this is more performant but less visually stunning.\n```javascript\n// Use an existing skybox preset.\nconst skybox = sim.createStars({minSize /* optional */: 0.75 /* default */});\n\n// Add a skybox preset\nconst skybox = sim.createSkybox({\n  textureUrl: '../path/to/image.png'\n});\n```\n\n`SpaceObject`: an object that can be added to the visualization (SpaceObjects can sometimes be referred to as simply \"Object\").  SpaceObjects can orbit, rotate, etc.  Subclasses include `RotatingObject` (has a defined spin axis), `ShapeObject` (has a 3D shapefile), and `SphereObject` (is spherical, like the Earth).\n```javascript\n// Create objects using presets. The presets include scientific ephem params and/or position.\nconst sun = viz.createObject('sun', Spacekit.SpaceObjectPresets.SUN);\nviz.createObject('mercury', Spacekit.SpaceObjectPresets.MERCURY);\nviz.createObject('venus', Spacekit.SpaceObjectPresets.VENUS);\n\n// Create a stationary object at [3, 1, -5] position.\nconst obj = viz.createObject('myobj', {\n  position: [3, 1, -5],\n};\n\n// Create an object that orbits.\n\n// Ephem is a class representing Kepler ephemerides, which defines the trajectory of astronomical objects as well\n// as artificial satellites in the sky, i.e., the position (and possibly velocity) over time.\nconst ephem = new Spacekit.Ephem({\n  epoch: 2458600.5,\n  a: 5.38533,\n  e: 0.19893,\n  i: 22.11137,\n  om: 294.42992,\n  w: 314.28890,\n  ma: 229.14238,\n}, 'deg');\n\nconst asteroid = sim.createObject('Asteroid Aci', {\n  ephem,\n});\n\n// Create a shape object\nconst obj = viz.createShape('myobj', {\n  position: [3, 1, -5],\n  shape: {\n    // Example shape file -\n    // http://astro.troja.mff.cuni.cz/projects/asteroids3D/web.php?page=db_asteroid_detail&asteroid_id=1046\n    shapeUrl: '../path/to/shape.obj', // Cacus\n  },\n  rotation: {\n    lambdaDeg: 251,\n    betaDeg: -63,\n    period: 3.755067,\n    yorp: 1.9e-8,\n    phi0: 0,\n    jd0: 2443568.0,\n  },\n  debug: {\n    showAxes: true,\n  },\n});\n\n// Create a sphere object\nsim.createSphere('earth', {\n  textureUrl: './earth_66mya.jpg',\n  radius: 2 /* default to 1 */\n  debug: {\n    showAxes: true,\n  },\n});\n```\n\n`KeplerParticles`: an optimized class for creating many particles that follow Kepler orbits.  These particles don't have a specific shape or size.  Instead, they share a 2D texture.  This is useful for when you want to show many objects at once, such as the asteroid belt.\n\n# How to get started\n\nTo be written...\n\n# Dependencies\n\nSpacekit relies on some image and data assets that are not included in the Javascript file.\n\nBy default, these dependencies are hosted on the spacekit site (typpo.github.io/spacekit).  If you want to host these assets yourself, you can set the `Simulation`'s `basePath` parameter to a folder that contains these files:\n\n  - [Spacekit asset directory](https://github.com/typpo/spacekit/tree/master/src/assets)\n  - [Spacekit data directory](https://github.com/typpo/spacekit/tree/master/src/data)\n\nFor example:\n\n```\nconst viz = new Spacekit.Simulation({\n  basePath: 'https://mysite.com/static/spacekit',\n});\n```\n\nIf you want to contribute to this project, you will also need to install Python (2.7 or 3).\n\n# Running an Example\n\nRunning `./server.sh` will start a basic Python webserver.  Go to http://localhost:8001/examples/index.html to load a simple example.\n\nIf you're making changes to the code, run `yarn build` to update the build outputs.  `yarn build:watch` will continuously watch for your changes and update the build and also host a server on localhost:8001 (so you don't have to start the Python server separately).\n\n# Usage\n\nSee the [examples](https://github.com/typpo/spacekit/tree/master/examples) directory for full usage examples.  For now, here's some example code that will build an interactive visualization of a couple planets:\n\n```javascript\n// Create the visualization and put it in our div.\nconst viz = new Spacekit.Simulation(document.getElementById('main-container'), {\n  assetPath: '../src/assets',\n});\n\n// Create a skybox using NASA TYCHO artwork.\nconst skybox = viz.createSkybox(Spacekit.SkyboxPresets.NASA_TYCHO);\n\n// Create our first object - the sun - using a preset space object.\nconst sun = viz.createObject('sun', Spacekit.SpaceObjectPresets.SUN);\n\n// Then add some planets\nviz.createObject('mercury', Spacekit.SpaceObjectPresets.MERCURY);\nviz.createObject('venus', Spacekit.SpaceObjectPresets.VENUS);\nviz.createObject('earth', Spacekit.SpaceObjectPresets.EARTH);\nviz.createObject('mars', Spacekit.SpaceObjectPresets.MARS);\nviz.createObject('jupiter', Spacekit.SpaceObjectPresets.JUPITER);\nviz.createObject('saturn', Spacekit.SpaceObjectPresets.SATURN);\nviz.createObject('uranus', Spacekit.SpaceObjectPresets.URANUS);\nviz.createObject('neptune', Spacekit.SpaceObjectPresets.NEPTUNE);\n```\n\n![example](https://i.imgur.com/WseTJidl.jpg)\n",
    "longname": "/home/ian/code/spacekit/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"spacekit\",\n  \"version\": \"0.0.1\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"build:watch\": \"ENABLE_DEV_SERVER=1 rollup -c -w\",\n    \"lint\": \"eslint .\",\n    \"lint:fix\": \"eslint --fix .\",\n    \"docs\": \"esdoc\",\n    \"format\": \"prettier --write --single-quote --trailing-comma all '{src,examples}/**/*.js'\",\n    \"test\": \"jest\"\n  },\n  \"devDependencies\": {\n    \"@arkweid/lefthook\": \"^0.6.3\",\n    \"@babel/core\": \"^7.9.0\",\n    \"@babel/preset-env\": \"^7.9.5\",\n    \"babel-jest\": \"^25.5.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.9.0\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-config-airbnb-base\": \"^13.1.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"jest\": \"^25.4.0\",\n    \"prettier\": \"^1.18.2\",\n    \"rollup\": \"^0.67.4\",\n    \"rollup-plugin-commonjs\": \"^9.2.0\",\n    \"rollup-plugin-livereload\": \"^1.0.3\",\n    \"rollup-plugin-node-resolve\": \"^4.0.0\"\n  },\n  \"dependencies\": {\n    \"julian\": \"^0.2.0\",\n    \"postprocessing\": \"^6.8.0\",\n    \"rollup-plugin-serve\": \"^1.0.1\",\n    \"three\": \"^0.107.0\"\n  }\n}\n",
    "longname": "/home/ian/code/spacekit/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]